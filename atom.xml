<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>9032676&#39;s Blog</title>
  
  <subtitle>为探索而生</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.e7mc.com/"/>
  <updated>2019-09-07T09:48:54.755Z</updated>
  <id>http://blog.e7mc.com/</id>
  
  <author>
    <name>9032676</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>一个 Haskeller 的范畴论入坑笔记 第三章：排序关系，么半群与 Kleisli 范畴</title>
    <link href="http://blog.e7mc.com/2019/08/26/Category-Theory-3/"/>
    <id>http://blog.e7mc.com/2019/08/26/Category-Theory-3/</id>
    <published>2019-08-25T16:04:44.000Z</published>
    <updated>2019-09-07T09:48:54.755Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>为什么上两篇范畴论笔记大多数都是针对范畴与函数的关系，难道其他关系不能抽象成一个范畴吗？这个答案当然是否定的，前两篇是借助了函数的概念以更好地理解组合或同态究竟是些什么东西，因此而从本篇开始，我们来说一些与函数关系不大的一些知识吧！</p><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>既然范畴论里面我们要讨论的东西无非就是各种 Composition（组合），就连排序关系也不例外，在第一章时就已讲述了相关概念，这里就不再重提。而我们现在要知道的是除了第二章提及的函数关系外，我们究竟还可以拿组合来研究些什么，而排序就是一个很好例子了。</p><p>例如我们有时候会说 $a$ 小于或等于 $b$，而 $b$ 小于或等于 $c$，那么必然蕴含了 $a \leq c$（传递性），这里不难看出实际上排序关系其实也是一个简单的组合，只不过我们把对应的态射给替换成具体我们定义的二元关系 $\leq$ 罢了。<br>$$<br>\begin{align}<br>a \xrightarrow[\leq]{} b \xrightarrow[\leq]{} c \\<br>a \xrightarrow[\leq]{} c<br>\end{align}<br>$$</p><h2 id="排序关系（Order-Relationship）"><a href="#排序关系（Order-Relationship）" class="headerlink" title="排序关系（Order Relationship）"></a>排序关系（Order Relationship）</h2><p>排序关系是对排序在直觉上的自然诠释，同样是属于一种二元关系，它们各自有不同的特性，下面将会介绍一些较为常见的排序关系。</p><h3 id="预序（Preorder（Quasiorder））"><a href="#预序（Preorder（Quasiorder））" class="headerlink" title="预序（Preorder（Quasiorder））"></a>预序（Preorder（Quasiorder））</h3><p>预序关系满足了自反性（Reflexive）及传递性（Transitive），作为排序关系来讲预序可以将其概念进一步推广至等价关系以及非严谨（Non-Strict）的偏序关系。而由预序关系所组成的集合被称为预序集合（Preordered set or Proset）</p><p>现在设 $\leq$ 是 P 上的二元关系，若果满足下列性质，则称这是一个预序关系，例如：</p><ul><li>$\forall a \in P, a \leq a$ （自反性）</li><li>$\forall a, b, c \in P$，若 $a \leq b$ 且 $b \leq c$，则 $a \leq c$（传递性）</li></ul><h3 id="偏序（Partial-order）"><a href="#偏序（Partial-order）" class="headerlink" title="偏序（Partial order）"></a>偏序（Partial order）</h3><p>如果我们将预序进一步推广，并加上反对称性（Anti-symmetric）作为约束，那么我们说这个二元关系就是偏序关系。</p><p>现在设 $\leq$ 是 P 上的二元关系，若果满足下列性质，则称这是一个偏序关系，例如：</p><ul><li>$\forall a \in P, a \leq a$ （自反性）</li><li>$\forall a, b, c \in P$，若 $a \leq b$ 且 $b \leq c$，则 $a \leq c$（传递性）</li><li>$\forall a, b \in P$，若 $a \leq b$ 且 $b \leq a$，则蕴含了 $a = b$ （反对称性）</li></ul><h3 id="全序（Total-order）"><a href="#全序（Total-order）" class="headerlink" title="全序（Total order）"></a>全序（Total order）</h3><h2 id="排序在范畴论上的关系（Order-in-Category-Theory）"><a href="#排序在范畴论上的关系（Order-in-Category-Theory）" class="headerlink" title="排序在范畴论上的关系（Order in Category Theory）"></a>排序在范畴论上的关系（Order in Category Theory）</h2><h2 id="么半群（Monoid）"><a href="#么半群（Monoid）" class="headerlink" title="么半群（Monoid）"></a>么半群（Monoid）</h2><h2 id="Kleisli-范畴（Kleisli-Category）"><a href="#Kleisli-范畴（Kleisli-Category）" class="headerlink" title="Kleisli 范畴（Kleisli Category）"></a>Kleisli 范畴（Kleisli Category）</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;为什么上两篇范畴论笔记大多数都是针对范畴与函数的关系，难道其他关系不能抽象成一个范畴吗？这个答案当然是否定的，前两篇是借助了函数的概念以更好
      
    
    </summary>
    
    
      <category term="函数式编程" scheme="http://blog.e7mc.com/tags/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    
      <category term="范畴论" scheme="http://blog.e7mc.com/tags/%E8%8C%83%E7%95%B4%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>星际蜗牛折腾记 第三章：部署 Docker</title>
    <link href="http://blog.e7mc.com/2019/08/09/J1900-Tossing-3/"/>
    <id>http://blog.e7mc.com/2019/08/09/J1900-Tossing-3/</id>
    <published>2019-08-09T08:33:25.000Z</published>
    <updated>2019-08-11T10:51:14.928Z</updated>
    
    <content type="html"><![CDATA[<p>在折腾完 RAID 之后，为了让作为 NAS 的 ArchLinux 发挥可用作应用服务器的作用，所以今天则要开始弄 Docker 了，废话不多说直接开始吧！</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><h2 id="安装-Docker"><a href="#安装-Docker" class="headerlink" title="安装 Docker"></a>安装 Docker</h2><p>安装 Docker 的途径有两种，第一种是透过 pacman 直接安装 docker 官方包，而另一种则是透过 <a href="https://wiki.archlinux.org/index.php/Arch_User_Repository" target="_blank" rel="noopener">Arch 用户软件仓库</a>（Arch User Repository，AUR）第三方用户仓库中生成并安装开发版本 <a href="https://aur.archlinux.org/packages/docker-git/" target="_blank" rel="noopener">docker-git</a>，下面使用 pacman 演示安装流程：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># pacman -S docker</span><br><span class="line"># systemctl start docker</span><br><span class="line"># systemctl enable docker</span><br><span class="line"># docker info</span><br></pre></td></tr></table></figure><ol><li>使用 <code>pacman -S docker</code> 下载并安装 docker</li><li>使用 <code>systemctl start docker</code> 与 <code>systemctl enable docker</code> 使 docker 服务启动与开机自启。</li><li>使用 <code>docker info</code> 查询 docker 当前运行状态，确保 docker 顺利安装并启动。</li></ol><h2 id="配置-Docker"><a href="#配置-Docker" class="headerlink" title="配置 Docker"></a>配置 Docker</h2><h3 id="为用户添加使用-docker-命令权限"><a href="#为用户添加使用-docker-命令权限" class="headerlink" title="为用户添加使用 docker 命令权限"></a>为用户添加使用 docker 命令权限</h3><p>为了让非 root 用户能正常使用 docker 命令，我们需要把目标用户添加到 <code>docker</code> 组内（如果组别不存在，你可以使用 <code>groupadd docker</code> 创建）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># usermod -a -G docker a9032676</span><br></pre></td></tr></table></figure></p><p>并且登出账号重新登陆，输入 <code>docker</code> 确认是否已拥有权限使用。</p><h3 id="配置-daemon-json-文件"><a href="#配置-daemon-json-文件" class="headerlink" title="配置 daemon.json 文件"></a>配置 daemon.json 文件</h3><p>daemon.json 文件是 docker 守护进程的运行配置</p><h4 id="创建文件"><a href="#创建文件" class="headerlink" title="创建文件"></a>创建文件</h4><p>首先使用 nano / vim 之类文本编辑器创建文件 <code>/etc/docker/daemon.json</code>。</p><h4 id="镜像加速服务"><a href="#镜像加速服务" class="headerlink" title="镜像加速服务"></a>镜像加速服务</h4><p>首先鉴于地区网络质量差异问题，在远程使用 <code>docker pull</code> 拉取镜像的时候可能会较慢，因此我们可以选择性地配置 docker 的镜像服务器加速下载：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [</span><br><span class="line">&quot;https://registry.docker-cn.com&quot;,</span><br><span class="line">&quot;https://dockerhub.azk8s.cn&quot;,</span><br><span class="line">&quot;https://docker.mirrors.ustc.edu.cn&quot;,</span><br><span class="line">&quot;https://hub-mirror.c.163.com&quot;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>重启 docker 使配置生效：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># systemctl restart docker</span><br></pre></td></tr></table></figure></p><h3 id="迁移本地镜像目录"><a href="#迁移本地镜像目录" class="headerlink" title="迁移本地镜像目录"></a>迁移本地镜像目录</h3><p>在安装完成之后默认的镜像存放位置是位于 <code>/var/lib/docker</code> 目录下方的，而我们需要透过添加 <code>systemd</code> 的配置以更改 docker 的镜像储存位置：</p><p>首先使用 <code>mkdir</code> 新增 <code>docker.service.d</code> 目录：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># mkdir /etc/systemd/system/docker.service.d/</span><br></pre></td></tr></table></figure></p><p>然后在目录下新建 <code>docker-storage.conf</code> 文件，并添加下列内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[Service]</span><br><span class="line">ExecStart= </span><br><span class="line">ExecStart=/usr/bin/dockerd --data-root=/path/to/new/location/docker -H fd://</span><br></pre></td></tr></table></figure></p><p>把 <code>--data-root</code> 选项更改成你目标的目录并保存即可，再将 <code>/var/lib/docker</code> 内的内容复制到你的目录上。</p><p>完成之后我们需要使用如下命令重启下 <code>docker.service</code> 服务：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure></p><p>最后可使用 <code>systemctl status docker</code> 查询服务是否成功启动。</p><h2 id="相关应用推荐"><a href="#相关应用推荐" class="headerlink" title="相关应用推荐"></a>相关应用推荐</h2><h3 id="Portainer"><a href="#Portainer" class="headerlink" title="Portainer"></a>Portainer</h3><h4 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h4><p>由于 docker 日常都需要使用命令行管理各种容器 / 镜像与网络设置等等这些东西，有没有一个方法能够可视化地编辑及部署容器呢？那当然是有的，答案就是 <a href="https://www.portainer.io/" target="_blank" rel="noopener">Portainer</a> 啦！</p><h4 id="仓库地址"><a href="#仓库地址" class="headerlink" title="仓库地址"></a>仓库地址</h4><p><a href="https://hub.docker.com/r/portainer/portainer" target="_blank" rel="noopener">portainer/portainer</a></p><h4 id="部署容器"><a href="#部署容器" class="headerlink" title="部署容器"></a>部署容器</h4><p>这里仅演示 Linux 平台的安装与方式，我们需要创建一个卷，并命名为 <code>portainer</code> 即可。另外容器本身需要两个端口运作，因此需要把任意两个外部端口映射成 <code>8000</code> 与 <code>9000</code> 即可：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># docker volume create portainer_data</span><br><span class="line"># docker run -d -p 8000:8000 -p 9000:9000 -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer</span><br></pre></td></tr></table></figure></p><p>在正式跑起来之后进入网页后台 <code>http://[your_address]:9000</code> 创建新账号并登陆即可。</p><h3 id="Samba"><a href="#Samba" class="headerlink" title="Samba"></a>Samba</h3><h4 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h4><p>Samba 提供了安全，可靠且快速的文件共享系统，且透过 SMB / CIFS 协议传输数据，并且完全兼容 DOS 与 Windows，OS/2，Linux 与其他更多的系统。</p><h4 id="仓库地址-1"><a href="#仓库地址-1" class="headerlink" title="仓库地址"></a>仓库地址</h4><p><a href="https://hub.docker.com/r/dperson/samba" target="_blank" rel="noopener">dperson/samba</a></p><h4 id="部署容器-1"><a href="#部署容器-1" class="headerlink" title="部署容器"></a>部署容器</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># docker run -it --name samba -p 139:139 -p 445:445 \</span><br><span class="line">  -v /path/to/directory:/mount \</span><br><span class="line">  -d dperson/samba</span><br></pre></td></tr></table></figure><h3 id="AriaNg"><a href="#AriaNg" class="headerlink" title="AriaNg"></a>AriaNg</h3><h4 id="简介-3"><a href="#简介-3" class="headerlink" title="简介"></a>简介</h4><p>很好用很方便的一个 Aria2 下载工具，自带网页可视化管理且完全兼容 Linux / 群晖 / FreeNAS 等系统。</p><h4 id="仓库地址-2"><a href="#仓库地址-2" class="headerlink" title="仓库地址"></a>仓库地址</h4><p><a href="https://hub.docker.com/r/auska/docker-aria2" target="_blank" rel="noopener">auska/docker-aria2</a></p><h4 id="创建容器"><a href="#创建容器" class="headerlink" title="创建容器"></a>创建容器</h4><p>由于需要填写的变量以及选项较多，推荐直接于 Portainer 内直接下载并新建容器，当然这里也只讲述下命令行启动的方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># docker create --name=aria2_web \</span><br><span class="line">  -v /home/a9032676/downloads:/mnt \</span><br><span class="line">  -v /home/a9032676/.aria2_conf:/config \</span><br><span class="line">  -e PGID=1000 -e PUID=1000 -e SECRET=PASSWORD \</span><br><span class="line">  -p 6800:6800 -p 80:80 \</span><br><span class="line">  auska/docker-aria2</span><br></pre></td></tr></table></figure></p><p>参数说明：</p><ul><li><code>--name=&lt;CONTAINER_NAME&gt;</code> 设置容器名字。</li><li><code>-v &lt;DOWN_PATH&gt;:/mnt</code> 把容器内的 <code>/mnt（默认下载存放位置）</code> 目录映射到卷上，或可选择在宿主机（Host）上指定的目录挂载。</li><li><code>-v &lt;CONF_PATH&gt;:/config</code> 同上，只不过这个是配置文件目录。</li><li><code>-e PGID=1000 -e PUID=1000 -e SECRET=&lt;PASSWORD&gt;</code> 这里指定三个环境变量（Environment）参数，第一二个参数请使用 <code>id USER</code> 命令获取，而第三个为你的 RPC 服务器密钥，请自行更改。</li><li><code>-p &lt;HOST_PORT&gt;:6800 -p &lt;HOST_PORT&gt;:80</code> 由于该容器需要两个端口，<code>6800</code> 为 RPC 服务监听端口，而 <code>80</code> 则为 Aria2 网页下载管理端口，请按照自己宿主机的端口进行映射。</li></ul><h3 id="Transmission"><a href="#Transmission" class="headerlink" title="Transmission"></a>Transmission</h3><p>相信使用过 Transmission 下载 BT 文件的对它都不陌生，它的配置简洁，而且下载高效，且开源的性质，相信也吸引了很多人使用。而在 docker 上也有相关的第三方实现。</p><h4 id="仓库地址-3"><a href="#仓库地址-3" class="headerlink" title="仓库地址"></a>仓库地址</h4><p><a href="https://hub.docker.com/r/linuxserver/transmission/" target="_blank" rel="noopener">linuxserver/transmission</a></p><h4 id="创建容器-1"><a href="#创建容器-1" class="headerlink" title="创建容器"></a>创建容器</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># docker create \</span><br><span class="line">  --name=transmission \</span><br><span class="line">  -e PUID=1000 \</span><br><span class="line">  -e PGID=1000 \</span><br><span class="line">  -e TZ=Asia/HongKong \</span><br><span class="line">  -e TRANSMISSION_WEB_HOME=/combustion-release/ `#optional` \</span><br><span class="line">  -p 9091:9091 \</span><br><span class="line">  -p 51413:51413 \</span><br><span class="line">  -p 51413:51413/udp \</span><br><span class="line">  -v path to data:/config \</span><br><span class="line">  -v path to downloads:/downloads \</span><br><span class="line">  -v path to watch folder:/watch \</span><br><span class="line">  --restart unless-stopped \</span><br><span class="line">  linuxserver/transmission</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li><code>-e PGID=1000 -e PUID=1000</code> 请使用 <code>id USER</code> 命令获取 PGID 与 PUID。</li><li><code>-e TZ=Asia/HongKong</code> 时区设置。</li><li><code>-e TRANSMISSION_WEB_HOME=/combustion-release/</code> 指定 WebUI 的目录位置（可选）。</li><li><code>-p 9091:9091</code> 为你的 Transmission 下载网页端口</li><li><code>-p 51413:51413 -p 51413:51413/udp</code> 为 Torrent 的 TCP 与 UDP 端口</li><li><code>-v path to data:/config</code> 为配置目录</li><li><code>-v path to downloads:/downloads</code> 为下载目录</li><li><code>-v path to watch folder:/watch</code> Torrent 文件的 watch 目录</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在折腾完 RAID 之后，为了让作为 NAS 的 ArchLinux 发挥可用作应用服务器的作用，所以今天则要开始弄 Docker 了，废话不多说直接开始吧！&lt;/p&gt;
&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简
      
    
    </summary>
    
    
      <category term="NAS" scheme="http://blog.e7mc.com/tags/NAS/"/>
    
      <category term="ArchLinux" scheme="http://blog.e7mc.com/tags/ArchLinux/"/>
    
      <category term="Docker" scheme="http://blog.e7mc.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>星际蜗牛折腾记 第二章：组装 RAID</title>
    <link href="http://blog.e7mc.com/2019/08/09/J1900-Tossing-2/"/>
    <id>http://blog.e7mc.com/2019/08/09/J1900-Tossing-2/</id>
    <published>2019-08-09T01:39:53.000Z</published>
    <updated>2019-08-09T16:33:41.230Z</updated>
    
    <content type="html"><![CDATA[<p>经历昨天一天的奋战，在一边装的同时也把上一章文章写好了。今天的话继续为大家带来如何在纯命令行环境下继续折腾我们的星际蜗牛并为硬盘们组装上冗余磁盘阵列（Redundant Array of Independent Disks，又称 RAID）。</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>还是经由朋友的推介，我从某宝店家中以 400 块单个的价格搞来了两块 HGST（原日立，据说比较靠谱，就数字来讲的话 <ruby>故障<rp> (</rp><rt>fān chē</rt><rp>) </rp></ruby>率 相较其他品牌依旧最低） 的 4T 监控盘（非 SMR 叠瓦式，这灵车我还真不敢上），而年产日期有点久远，是 2014 年的，疑似翻新盘，因此买回来之后也跑完了对硬盘的各项检测，确保质量没问题并对这两块硬盘组上 软件RAID1（较为注重数据安全性，但储存容量只有一半），硬件 RAID 需要另行购置 RAID 卡。</p><h2 id="硬盘信息"><a href="#硬盘信息" class="headerlink" title="硬盘信息"></a>硬盘信息</h2><ul><li>型号: HGST HMS5C4040BLE640</li><li>容量: 4TB（格式化后大约 3.6TB 左右）</li><li>类型：监控盘（连续写入较好，随即读取性能较差）</li></ul><p>详细数据请点<a href="https://documents.westerndigital.com/content/dam/doc-library/en_us/assets/public/western-digital/product/hgst/megascale-4000-series/data-sheet-megascale-dc-4000-b.pdf" target="_blank" rel="noopener">这里</a>查询。</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h3><p>如果硬盘之前存放有重要数据，切记切记要先备份，这个很关键。</p><h3 id="检测硬盘"><a href="#检测硬盘" class="headerlink" title="检测硬盘"></a>检测硬盘</h3><p>在组装前请检测硬盘是否存在损坏，坏道，以及对其进行性能测试，确认没有问题之后再开始组装。</p><h2 id="组装-RAID"><a href="#组装-RAID" class="headerlink" title="组装 RAID"></a>组装 RAID</h2><h3 id="擦除硬盘数据"><a href="#擦除硬盘数据" class="headerlink" title="擦除硬盘数据"></a>擦除硬盘数据</h3><p>若果在组装无论是新旧磁盘都必须先格式化，再进行组装。而如果本身硬盘已在之前组装了 RAID 的话，请使用以下步骤将硬盘内数据（包括 RAID 配置数据）擦除掉：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># mdadm --misc --zero-superblock /dev/&lt;drive&gt;</span><br></pre></td></tr></table></figure></p><p>或者指定硬盘上的其中一个分区：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># mdadm --misc --zero-superblock /dev/&lt;partition&gt;</span><br></pre></td></tr></table></figure></p><h3 id="为硬盘建立分区"><a href="#为硬盘建立分区" class="headerlink" title="为硬盘建立分区"></a>为硬盘建立分区</h3><p>建立分区前，这里我使用了 <code>parted -l</code>（或 <code>fdisk -l</code>，选择 parted 无疑是因为较直观一点）命令查询当前硬盘情况：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">[root@archlinux /]# parted -l</span><br><span class="line">Model: ATA C3M-16G (scsi)</span><br><span class="line">Disk /dev/sda: 16.0GB</span><br><span class="line">Sector size (logical/physical): 512B/512B</span><br><span class="line">Partition Table: gpt</span><br><span class="line">Disk Flags: </span><br><span class="line"></span><br><span class="line">Number  Start   End     Size    File system  Name  Flags</span><br><span class="line"> 1      1049kB  538MB   537MB   fat32              boot, esp</span><br><span class="line"> 2      538MB   16.0GB  15.5GB  ext4</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Model: ATA HGST HMS5C4040BL (scsi)</span><br><span class="line">Disk /dev/sdb: 4001GB</span><br><span class="line">Sector size (logical/physical): 512B/4096B</span><br><span class="line">Partition Table: loop</span><br><span class="line">Disk Flags: </span><br><span class="line"></span><br><span class="line">Number  Start  End  Size  File system  Name  Flags</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Model: ATA HGST HMS5C4040BL (scsi)</span><br><span class="line">Disk /dev/sdc: 4001GB</span><br><span class="line">Sector size (logical/physical): 512B/4096B</span><br><span class="line">Partition Table: loop</span><br><span class="line">Disk Flags: </span><br><span class="line"></span><br><span class="line">Number  Start  End     Size    File system  Flags</span><br></pre></td></tr></table></figure></p><p>从上面看出，我们现在有两块 HGST 4TB 的 HDD 在这，分别是 <code>/dev/sdb</code> 以及 <code>/dev/sdc</code>，现在我们使用 <code>fdisk /dev/sdb</code> 以及 <code>fdisk /dev/sdc</code> 对它们建立 RAID 分区：</p><p>在建立分区之前首先要更改硬盘的 <code>disklabel</code> 为 GPT 格式，因此先输入 <code>g</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@archlinux /]# fdisk /dev/sdb</span><br><span class="line"></span><br><span class="line">Welcome to fdisk (util-linux 2.34).</span><br><span class="line">Changes will remain in memory only, until you decide to write them.</span><br><span class="line">Be careful before using the write command.</span><br><span class="line"></span><br><span class="line">The old ext4 signature will be removed by a write command.</span><br><span class="line"></span><br><span class="line">Device does not contain a recognized partition table.</span><br><span class="line">The size of this disk is 3.7 TiB (4000787030016 bytes). DOS partition table format cannot be used on drives for volumes larger than 2199023255040 bytes for 512-byte sectors. Use GUID partition table format (GPT).</span><br><span class="line"></span><br><span class="line">Created a new DOS disklabel with disk identifier 0xfe1551f9.</span><br><span class="line"></span><br><span class="line">Command (m for help): g</span><br><span class="line">Created a new GPT disklabel (GUID: 3171CF65-B466-9347-A082-3AACDD9B9721).</span><br></pre></td></tr></table></figure></p><p>在更改完成之后，现在使用 <code>n</code> 创建新的分区，然后输入 <code>t</code> 更改刚刚创建的新分区类型为 Linux RAID（序号为 <code>29</code>，GUID为 <code>A19D880F-05FC-4D3B-A006-743F0F84911E</code>），最后输入 <code>i</code> 查询创建结果，在确认无误后输入 <code>w</code> 保存并且退出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">Command (m for help): n</span><br><span class="line">Partition number (1-128, default 1): </span><br><span class="line">First sector (2048-7814037134, default 2048): </span><br><span class="line">Last sector, +/-sectors or +/-size&#123;K,M,G,T,P&#125; (2048-7814037134, default 7814037134): </span><br><span class="line"></span><br><span class="line">Created a new partition 1 of type &apos;Linux filesystem&apos; and of size 3.7 TiB.</span><br><span class="line"></span><br><span class="line">Command (m for help): t</span><br><span class="line">Selected partition 1</span><br><span class="line">Partition type (type L to list all types): 29</span><br><span class="line">Changed type of partition &apos;Linux filesystem&apos; to &apos;Linux RAID&apos;.</span><br><span class="line"></span><br><span class="line">Command (m for help): i</span><br><span class="line">Selected partition 1</span><br><span class="line">         Device: /dev/sdb1</span><br><span class="line">          Start: 2048</span><br><span class="line">            End: 7814037134</span><br><span class="line">        Sectors: 7814035087</span><br><span class="line">           Size: 3.7T</span><br><span class="line">           Type: Linux RAID</span><br><span class="line">      Type-UUID: A19D880F-05FC-4D3B-A006-743F0F84911E</span><br><span class="line">           UUID: 6885A106-3022-FA4F-966F-EDBA96B4A9D9</span><br><span class="line"></span><br><span class="line">Command (m for help): w</span><br><span class="line">The partition table has been altered.</span><br><span class="line">Calling ioctl() to re-read partition table.</span><br><span class="line">Syncing disks.</span><br><span class="line"></span><br><span class="line">[root@archlinux /]#</span><br></pre></td></tr></table></figure></p><p>然后重复上述步骤为 <code>/dev/sdc</code> 也创建一遍分区表，保存退出并输入 <code>parted -l</code> 查询最终分区表结果（已省略其他硬盘）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Model: ATA HGST HMS5C4040BL (scsi)</span><br><span class="line">Disk /dev/sdb: 4001GB</span><br><span class="line">Sector size (logical/physical): 512B/4096B</span><br><span class="line">Partition Table: gpt</span><br><span class="line">Disk Flags: </span><br><span class="line"></span><br><span class="line">Number  Start   End     Size    File system  Name  Flags</span><br><span class="line"> 1      1049kB  4001GB  4001GB                     raid</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Model: ATA HGST HMS5C4040BL (scsi)</span><br><span class="line">Disk /dev/sdc: 4001GB</span><br><span class="line">Sector size (logical/physical): 512B/4096B</span><br><span class="line">Partition Table: gpt</span><br><span class="line">Disk Flags: </span><br><span class="line"></span><br><span class="line">Number  Start   End     Size    File system  Name  Flags</span><br><span class="line"> 1      1049kB  4001GB  4001GB                     raid</span><br></pre></td></tr></table></figure></p><h3 id="建立硬盘阵列"><a href="#建立硬盘阵列" class="headerlink" title="建立硬盘阵列"></a>建立硬盘阵列</h3><p>这里我们需要使用到一系列的 <code>mdadm</code> 命令（请使用 <code>pacman -S mdadm</code> 进行安装）创建硬盘阵列：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># mdadm --create --verbose --level=1 --metadata=1.2 --raid-devices=2 /dev/md/RAID1 /dev/sdb1 /dev/sdc1</span><br></pre></td></tr></table></figure></p><p>用法：mdadm [选项] 设备 分区…<br>选项：</p><ul><li><code>--level</code> 是你要组合的 RAID 类型，这里我们是 RAID1 所以就直接填写 1 即可。</li><li><code>--metadata</code> 默认为 1.2，但若你的启动引导器（Bootloader）使用的是 Syslinux 且版本为 v4.07 的话请将这个变量改为 1.0。</li><li><code>--raid-devices</code> 指的是你要组成阵列的硬盘数量，我们这里只有两个那就填写 2。- <code>/dev/md/YOUR_RAID_NAME</code> 为命令 <code>mdadm</code> 的第一个必填参数，系统会根据这个路径去创建软链接并指向你创建的 RAID 阵列上（这里我使用 <code>ls -l /dev/md</code> 查询出来的结果是：<code>RAID1 -&gt; ../md127</code>）。</li><li><code>/dev/sdX1 /dev/sdX1 ...</code> 后续的参数则是你 RAID 的具体分区位置。</li></ul><h3 id="查询-RAID-状态"><a href="#查询-RAID-状态" class="headerlink" title="查询 RAID 状态"></a>查询 RAID 状态</h3><p>在创建完毕之后，我们可以使用 <code>cat /proc/mdstat</code> 查询 RAID 当前的状态：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@archlinux /]# cat /proc/mdstat</span><br><span class="line">Personalities : [raid1] </span><br><span class="line">md127 : active raid1 sdc1[1] sdb1[0]</span><br><span class="line">      3906885440 blocks super 1.2 [2/2] [UU]</span><br><span class="line">      [&gt;....................]  resync =  0.1% (5158656/3906885440) finish=513.5min speed=126616K/sec</span><br><span class="line">      bitmap: 30/30 pages [120KB], 65536KB chunk</span><br></pre></td></tr></table></figure></p><p>可以发现我们刚组的 RAID 已经在开始在后台同步数据了，这时我们耐心等待同步完毕即可。</p><h3 id="格式化-RAID-阵列"><a href="#格式化-RAID-阵列" class="headerlink" title="格式化 RAID 阵列"></a>格式化 RAID 阵列</h3><p>在等待同步数据的同时，我们可以先对 RAID1 进行格式化（但要注意的是 RAID1 是完全由一个硬盘的所有内容镜像地复制到另外一个硬盘中，因此 RAID1 并没有采用到硬盘条带化（Stripe）技术，所以我们在格式化的时候并不需要手动计算 <code>stripe size</code> <code>stripe width</code> 这些东西，而类似 RAID5 / RAID6 这些则需要特别小心）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@archlinux md]# mkfs.ext4 /dev/md127</span><br><span class="line">mke2fs 1.45.3 (14-Jul-2019)</span><br><span class="line">Creating filesystem with 976721360 4k blocks and 244187136 inodes</span><br><span class="line">Filesystem UUID: cce6ae47-1d89-4293-a259-318c3b765a0b</span><br><span class="line">Superblock backups stored on blocks: </span><br><span class="line">32768, 98304, 163840, 229376, 294912, 819200, 884736, 1605632, 2654208, </span><br><span class="line">4096000, 7962624, 11239424, 20480000, 23887872, 71663616, 78675968, </span><br><span class="line">102400000, 214990848, 512000000, 550731776, 644972544</span><br><span class="line"></span><br><span class="line">Allocating group tables: done                            </span><br><span class="line">Writing inode tables: done                            </span><br><span class="line">Creating journal (262144 blocks): </span><br><span class="line">done</span><br><span class="line">Writing superblocks and filesystem accounting information:            </span><br><span class="line">done</span><br></pre></td></tr></table></figure></p><h3 id="挂载-RAID-阵列"><a href="#挂载-RAID-阵列" class="headerlink" title="挂载 RAID 阵列"></a>挂载 RAID 阵列</h3><p>在上述步骤都完成了之后，那现在当然就是挂载 RAID 阵列啦，我们现在使用 <code>mkdir /raid1</code> 创建了一个 <code>raid1</code> 文件夹，并把 <code>/dev/md127</code> 挂载到其上：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@archlinux md]# mkdir /raid1</span><br><span class="line">[root@archlinux md]# mount /dev/md127 /raid1</span><br></pre></td></tr></table></figure></p><p>使用 <code>df -h | grep &#39;/dev/md127&#39;</code> 验证我们是否挂载成功：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@archlinux raid1]# df -h | grep &apos;dev/md127&apos;</span><br><span class="line">/dev/md127      3.6T   89M  3.4T   1% /raid1</span><br></pre></td></tr></table></figure></p><h4 id="设置开机挂载"><a href="#设置开机挂载" class="headerlink" title="设置开机挂载"></a>设置开机挂载</h4><p>在使用 <code>mount</code> 挂载完后并不意味着 RAID 阵列开机就会启动 RAID 以及自动挂载，因此我们可以使用 mdadm 的指令把现行扫描出来的 RAID 阵列自动加到 <code>/etc/mdadm.conf</code> 上，好让系统在开机时自启 RAID 设备：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mdadm -D --scan &gt;&gt; /etc/mdadm.conf</span><br></pre></td></tr></table></figure></p><p>或手动编辑 <code>/etc/mdadm.conf</code> 并设定：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">DEVICE partitions</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">ARRAY /dev/md/RAID1 metadata=1.2 name=archlinux:RAID1 UUID=72326a38:db8867f1:6d3c072e:2c1a5d06</span><br></pre></td></tr></table></figure></p><p>把你的 RAID 阵列配置加到末尾即可（UUID 可使用 <code>mdadm --detail /dev/mdX</code> 查询）。</p><p>然后编辑 <code>/etc/fstab</code> 并把配置添加到末尾，好让系统开机自动挂载：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line"># /dev/md127</span><br><span class="line">/dev/md127 /raid1 ext4 defaults 0 0</span><br></pre></td></tr></table></figure></p><h4 id="重启并验证"><a href="#重启并验证" class="headerlink" title="重启并验证"></a>重启并验证</h4><p>最后一步就是输入 <code>reboot</code> 重启并使用 <code>df -h | grep raid1</code> 重新验证自动挂载是否成功。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这篇折腾的东西与上一篇其实也差不多，目前的话就差一些作为应有的基础配套与应用集群管理体系了，不然单纯作为存储用也就太浪费了，所以下一篇会集中讲述关于在 ArchLinux 部署 Docker 的安装流程与一些事宜。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;经历昨天一天的奋战，在一边装的同时也把上一章文章写好了。今天的话继续为大家带来如何在纯命令行环境下继续折腾我们的星际蜗牛并为硬盘们组装上冗余磁盘阵列（Redundant Array of Independent Disks，又称 RAID）。&lt;/p&gt;
&lt;h2 id=&quot;简介&quot;
      
    
    </summary>
    
    
      <category term="NAS" scheme="http://blog.e7mc.com/tags/NAS/"/>
    
      <category term="ArchLinux" scheme="http://blog.e7mc.com/tags/ArchLinux/"/>
    
      <category term="硬盘分区" scheme="http://blog.e7mc.com/tags/%E7%A1%AC%E7%9B%98%E5%88%86%E5%8C%BA/"/>
    
      <category term="RAID" scheme="http://blog.e7mc.com/tags/RAID/"/>
    
  </entry>
  
  <entry>
    <title>星际蜗牛折腾记 第一章：安装 ArchLinux</title>
    <link href="http://blog.e7mc.com/2019/08/07/J1900-Tossing-1/"/>
    <id>http://blog.e7mc.com/2019/08/07/J1900-Tossing-1/</id>
    <published>2019-08-07T08:43:25.000Z</published>
    <updated>2019-08-09T16:32:16.842Z</updated>
    
    <content type="html"><![CDATA[<p>最近本来有打算直接入手一台 Synology 主机的，但经过一个朋友的推介，最终我选择了星际蜗牛搭载 ArchLinux 作为 NAS 使用。</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>由于收到时店家已经为我预装好 Synology (黑群辉）了，本来不太打算怎么折腾直接使用的，但想了想为了日后更好的可自定义化最终还是使用了数天之后展开了重装的旅程（ArchLinux 真香。</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><ul><li>CPU: Intel(R) Celeron(R) CPU J1900 @ 1.99GHZ</li><li>内存: 8G DDR3</li><li>SSD: 16G</li><li>盘位数: 4个</li><li>网口: 2个 (双千兆)</li></ul><p>配置看上去其实差不多也就这样，但查了下发现供电可能是雷区，毕竟如果4个盘满载运行的话稳定性可能成为疑问，但暂且来说目前还只有两个盘那就不管了。</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h3><p>这个就不用多说了，在安装之前有重要数据切记要备份。</p><h3 id="参阅官方安装教程"><a href="#参阅官方安装教程" class="headerlink" title="参阅官方安装教程"></a>参阅官方安装教程</h3><p>在安装的同时建议打开 <a href="https://wiki.archlinux.org/index.php/Installation_guide" target="_blank" rel="noopener">官方安装教程</a> 边参考边安装，以免出错。</p><h3 id="制作-LiveCD-引导盘"><a href="#制作-LiveCD-引导盘" class="headerlink" title="制作 LiveCD 引导盘"></a>制作 LiveCD 引导盘</h3><p>首先前往 ArchLinux 国内镜像站（我这里选用了<a href="https://mirrors.tuna.tsinghua.edu.cn/archlinux/iso/" target="_blank" rel="noopener">清华源</a>），然后寻找合适版本的 ArchLinux 镜像文件并使用工具刻录到 USB 上（由于我的电脑系统使用了 Ubuntu 18.04 + gnome 桌面环境，因此我使用了可视化的 Disks 工具进行 LiveCD 制作），该步骤由于网上已有不同环境下制造的教程，因此略过。</p><h2 id="预处理步骤"><a href="#预处理步骤" class="headerlink" title="预处理步骤"></a>预处理步骤</h2><h3 id="插入已制作好的-LiveCD"><a href="#插入已制作好的-LiveCD" class="headerlink" title="插入已制作好的 LiveCD"></a>插入已制作好的 LiveCD</h3><p>现在我们把 LiveCD 插入到星际蜗牛主机上，并且在开机后进入 BIOS 界面，把启动项调整成我们刚插入到主机上的 USB （UEFI 方式），并在 F10 保存之后重新启动。</p><h3 id="擦除-Synology-系统数据"><a href="#擦除-Synology-系统数据" class="headerlink" title="擦除 Synology 系统数据"></a>擦除 Synology 系统数据</h3><p>在完成上述步骤之后，成功地进入了 ArchLinux 的命令行环境，但由于店家本身已经预装了黑群辉，因此我们需要把残留的数据都给清空掉。</p><ol><li><p>输入 <code>fdisk -l</code> 查看黑群辉系统所在分区（我这里查出来是 <code>/dev/sda</code>）。</p></li><li><p>使用 <code>dd if=/dev/zero of=/dev/sda</code> 写 0 擦除 <code>/dev/sda</code> 硬盘上的内容，并且在擦除完毕后直接使用 <code>Ctrl+C</code> 退出。</p></li></ol><h3 id="创建分区表"><a href="#创建分区表" class="headerlink" title="创建分区表"></a>创建分区表</h3><p>现在使用 <code>fdisk</code> 与 <code>parted</code> （官方推荐这两个）等工具对 <code>/dev/sda</code> 建立新的分区表（我这里使用的是 <code>cfdisk /dev/sda</code>）：</p><ol><li>首先要创建 EFI System Partition (ESP) 并作为引导文件储存用，这里我分出了 512M 给予 <code>/dev/sda1</code> 分区（官方建议 UEFI with GPT 是 260 ～ 512MB）。</li><li>然后的就是把剩余的空间全数分配给 <code>/dev/sda2</code>（这里你也可以预留一些大于 512MB 的空间分配给 <code>/dev/sda3</code> 作为 swap 区使用），并指定分区表类型为 Linux filesystem 即可。</li><li>保存并退出。</li></ol><p>最终分区表如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Device      Start      End  Sectors  Size Type</span><br><span class="line">/dev/sda1    2048  1050623  1048576  512M EFI System</span><br><span class="line">/dev/sda2 1050624 31277198 30226575 14.4G Linux filesystem</span><br></pre></td></tr></table></figure></p><h3 id="格式化分区空间"><a href="#格式化分区空间" class="headerlink" title="格式化分区空间"></a>格式化分区空间</h3><p>完成上述步骤之后，现在我们可以对上面两个分区进行格式化：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># mkfs.fat -F32 /dev/sda1</span><br><span class="line"># mkfs.ext4 /dev/sda2</span><br></pre></td></tr></table></figure></p><h3 id="创建-Swap-分区（可选）"><a href="#创建-Swap-分区（可选）" class="headerlink" title="创建 Swap 分区（可选）"></a>创建 Swap 分区（可选）</h3><p>如果在创建分区表的步骤上已经为系统创建了 Swap 分区，那么现在可以使用如下指令创建 Swap 区：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># mkswap /dev/sda2</span><br><span class="line"># swapon /dev/sda2</span><br></pre></td></tr></table></figure></p><h3 id="挂载分区"><a href="#挂载分区" class="headerlink" title="挂载分区"></a>挂载分区</h3><p>刚才我们已经对 <code>/dev/sda</code> 建立起了 <code>/dev/sda1</code> 与 <code>/dev/sda2</code> 这两个分区，现在我们开始把它们挂载到对应的位置上：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># mount /dev/sda2 /mnt</span><br><span class="line"># cd /mnt</span><br><span class="line"># mkdir boot</span><br><span class="line"># mount /dev/sda1 /boot</span><br></pre></td></tr></table></figure><h2 id="安装系统"><a href="#安装系统" class="headerlink" title="安装系统"></a>安装系统</h2><p>在确认挂载无误之后，我们现在就可以开始安装 ArchLinux 了！让我们看看接下来要干什么吧！</p><h3 id="配置-Pacman-镜像源（可略过，Live-模式默认启动所有镜像）"><a href="#配置-Pacman-镜像源（可略过，Live-模式默认启动所有镜像）" class="headerlink" title="配置 Pacman 镜像源（可略过，Live 模式默认启动所有镜像）"></a>配置 Pacman 镜像源（可略过，Live 模式默认启动所有镜像）</h3><p>由于 ArchLinux 采用了 Pacman 作为包管理系统并需要联网以安装一些基础包，而为了提升下载速度，所以在这个激动人心的安装过程之前先配置好我们的镜像列表：</p><ol><li><p>可以先前往 <a href="https://www.archlinux.org/mirrorlist/" target="_blank" rel="noopener">官方的镜像列表生成器</a> 生成你所在国家或地区的镜像服务器列表。</p></li><li><p>然后将它们复制粘贴到 <code>/etc/pacman.d/mirrorlist</code> 并保存即可。</p></li></ol><h3 id="安装-base-程序包组"><a href="#安装-base-程序包组" class="headerlink" title="安装 base 程序包组"></a>安装 base 程序包组</h3><p>在确保联网状态可用的情况下，使用 <code>pacstrap</code> 指令去安装及下载，并且稍稍等待一段时间：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># ip link</span><br><span class="line"># ping archlinux.org</span><br><span class="line"># pacstrap /mnt base</span><br></pre></td></tr></table></figure></p><p>不过要注意的是 <code>base</code> 包组在 Live 模式下安装并不包含所有工具，当然你也可以使用 <code>pacstrap /mnt base-devel</code> 安装基础开发者工具包组。</p><h3 id="配置-fstab"><a href="#配置-fstab" class="headerlink" title="配置 fstab"></a>配置 fstab</h3><p>对于一些日后可能需要用到的硬盘或者分区，或者哪些分区需要开机的时候自动挂载，我们可能需要在 <code>/etc/fstab</code> 文件中指定出来。现在使用 <code>genfstab</code> 指令简单的生成一个配置文件并用 cat 查询以确认生成结果。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># genfstab -U /mnt &gt;&gt; /mnt/etc/fstab</span><br><span class="line"># cat /mnt/etc/fstab</span><br></pre></td></tr></table></figure></p><h3 id="移动至系统根目录"><a href="#移动至系统根目录" class="headerlink" title="移动至系统根目录"></a>移动至系统根目录</h3><p>我们当前进程还是以 LiveCD 下的引导系统作为根目录，因此我们需要把根目录移动到我们新创建好的系统中（<code>/mnt</code> 里）再进行操作：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># arch-chroot /mnt</span><br></pre></td></tr></table></figure></p><h3 id="调整系统内的个性化配置（可选）"><a href="#调整系统内的个性化配置（可选）" class="headerlink" title="调整系统内的个性化配置（可选）"></a>调整系统内的个性化配置（可选）</h3><p>这里的配置较为次要，因此不作更详细的说明，详情可前往官方文档参阅：</p><h4 id="时区设置"><a href="#时区设置" class="headerlink" title="时区设置"></a>时区设置</h4><p>创建软链接把 <code>/etc/localtime</code> 指向 <code>/usr/share/zoneinfo/Region/City /etc/localtime</code> 让系统读取：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># ln -sf /usr/share/zoneinfo/Asia/Hong_Kong /etc/localtime</span><br><span class="line"># hwclock --systohc</span><br></pre></td></tr></table></figure></p><h4 id="本地化设置"><a href="#本地化设置" class="headerlink" title="本地化设置"></a>本地化设置</h4><p>创建本地化配置 <code>/etc/locale.conf</code> 并让系统读取，可使用 nano / vi 等方式进行编辑：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LANG=en_US.UTF-8</span><br></pre></td></tr></table></figure></p><h3 id="配置网络"><a href="#配置网络" class="headerlink" title="配置网络"></a>配置网络</h3><h4 id="配置-hosts-文件"><a href="#配置-hosts-文件" class="headerlink" title="配置 hosts 文件"></a>配置 hosts 文件</h4><p>现在我们编辑 <code>/etc/hosts</code> 文件，使 hosts 文件生效，下面是我的配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1localhost</span><br><span class="line">::1localhost</span><br><span class="line">127.0.1.190-ArchLinux</span><br></pre></td></tr></table></figure></p><h4 id="添加网卡配置"><a href="#添加网卡配置" class="headerlink" title="添加网卡配置"></a>添加网卡配置</h4><p>我们可以使用在 base 包自带的 <code>netctl</code> 进行有线网络配置：</p><ol><li>在命令行环境下先输入 <code>ip link</code> 查询未启动或未被分配有 IP 的网卡，我这里查询出来的是 enp1s0 与 enp4s0，因为接了网线的网口是下面的所以盲猜应该是 enp4s0。</li><li>使用 <code>nano /etc/netctl/enp4s0</code> 创建并编辑网卡配置（请把下述所有内容的 enp4s0 替换成你网卡配置的名字）：</li></ol><p>DHCP 动态分配 IP 请使用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Interface=enp4s0</span><br><span class="line">Connection=ethernet</span><br><span class="line">IP=dhcp</span><br></pre></td></tr></table></figure></p><p>静态分配 IP 请使用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Interface=enp4s0</span><br><span class="line">Connection=ethernet</span><br><span class="line">IP=static</span><br><span class="line">Address=(&apos;10.1.10.2/24&apos;)</span><br><span class="line">Gateway=&apos;10.1.10.1&apos;</span><br><span class="line">DNS=(&apos;10.1.10.1&apos;)</span><br></pre></td></tr></table></figure></p><ol start="3"><li><p>保存并退出，并输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">netctl start enp4s0</span><br><span class="line">netctl enable enp4s0</span><br><span class="line">netctl status enp4s0</span><br></pre></td></tr></table></figure><p><code>netctl start enp4s0</code> 为启动网卡，然后输入 <code>netctl enable enp4s0</code> 确保网卡在开机时启动，最后输入 <code>netctl status enp4s0</code> 查询网卡状态，确保启动成功。</p></li></ol><h3 id="设置-Root-密码"><a href="#设置-Root-密码" class="headerlink" title="设置 Root 密码"></a>设置 Root 密码</h3><p>设置 Root 密码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># passwd</span><br></pre></td></tr></table></figure></p><h3 id="设置启动引导"><a href="#设置启动引导" class="headerlink" title="设置启动引导"></a>设置启动引导</h3><p>在完成上述所有的步骤之后，现在来到最关键的一步了。在我们把系统配置完成之后，系统本身并不会自行引导并启动系统的，因此我们需要安装启动引导器（Bootloader），而官方给出了一整个 <a href="https://wiki.archlinux.org/index.php/Arch_boot_process#Boot_loader" target="_blank" rel="noopener">启动引导器列表</a> 供我们选择。</p><p>在这里我选用了 Grub 作为我的引导器，因此下面会列出 Grub 的安装流程：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># pacman -S grub efibootmgr os-prober</span><br><span class="line"># grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=GRUB</span><br><span class="line"># grub-mkconfig -o /boot/grub/grub.cfg</span><br></pre></td></tr></table></figure></p><ol><li>使用 pacman 下载并安装 grub，efibootmgr 与 os-prober 包</li><li>执行 grub-install 指令安装，我这里使用的是 UEFI 架构，因此设置 <code>--target</code> 为 <code>x86_64-efi</code>，而 efi 路径则设置为上面创建好的 <code>/boot</code> 路径（也为ESP）即可。</li><li>执行 grub-mkconfig 以生成 grub 的默认配置文件</li></ol><h3 id="重启主机进入安装系统"><a href="#重启主机进入安装系统" class="headerlink" title="重启主机进入安装系统"></a>重启主机进入安装系统</h3><p>在完成上述所有流程之后，我们现在可以输入 <code>exit</code> 或按下 <code>Ctrl+D</code> 退出 Chroot 环境，并执行 reboot（不要忘记移除我们搭载 Live 系统的 USB），进入新系统并使用设置好的 root 密码登陆，至此安装完毕！</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本篇较详细地讲述了安装 ArchLinux 系统的整个流程，当然相比起其他开箱即食的一键化傻瓜式系统安装要沉长许多，但也有助于进一步了解 Linux 的文件结构，也鼓励喜欢折腾的朋友可以尝试自己去弄一下。而作为 NAS 使用没有组 RAID 阵列怎么行，因此下一篇会为大家带来软件 RAID 阵列的组装。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近本来有打算直接入手一台 Synology 主机的，但经过一个朋友的推介，最终我选择了星际蜗牛搭载 ArchLinux 作为 NAS 使用。&lt;/p&gt;
&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简
      
    
    </summary>
    
    
      <category term="NAS" scheme="http://blog.e7mc.com/tags/NAS/"/>
    
      <category term="ArchLinux" scheme="http://blog.e7mc.com/tags/ArchLinux/"/>
    
      <category term="硬盘分区" scheme="http://blog.e7mc.com/tags/%E7%A1%AC%E7%9B%98%E5%88%86%E5%8C%BA/"/>
    
      <category term="系统安装" scheme="http://blog.e7mc.com/tags/%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>纯函数与副作用，以及如何对其建模</title>
    <link href="http://blog.e7mc.com/2019/07/22/Pure-Function-and-Side-Effects/"/>
    <id>http://blog.e7mc.com/2019/07/22/Pure-Function-and-Side-Effects/</id>
    <published>2019-07-22T09:22:27.000Z</published>
    <updated>2019-07-25T15:46:23.915Z</updated>
    
    <content type="html"><![CDATA[<p>纯函数是什么？副作用又是什么？它们会引致什么问题或有什么作用？相信对刚踏入函数式编程大门的人会对此抱有疑惑，本篇将会一一讲解。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;纯函数是什么？副作用又是什么？它们会引致什么问题或有什么作用？相信对刚踏入函数式编程大门的人会对此抱有疑惑，本篇将会一一讲解。&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="函数式编程" scheme="http://blog.e7mc.com/tags/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    
      <category term="Haskell" scheme="http://blog.e7mc.com/tags/Haskell/"/>
    
  </entry>
  
  <entry>
    <title>一个 Haskeller 的范畴论入坑笔记 第二章：函数与范畴关系</title>
    <link href="http://blog.e7mc.com/2019/07/20/Category-Theory-2/"/>
    <id>http://blog.e7mc.com/2019/07/20/Category-Theory-2/</id>
    <published>2019-07-20T11:09:41.000Z</published>
    <updated>2019-09-10T16:29:29.609Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>要说到函数与类型，只要是个写带有类型系统的编程语言，都应该很熟悉，因为我们天天都会接触到。但是对于在范畴论上，或更广义地我们指在数学上的函数，以及类型的概念（因为数学上类型相等于只是集合，下面会提及），他们又或许又有不一样的面貌展现在我们的面前。</p><h2 id="函数（Function）"><a href="#函数（Function）" class="headerlink" title="函数（Function）"></a>函数（Function）</h2><p>函数只是一个过程（或者说是一个黑箱），因为它只负责接受某些参数，然后处理，最后返回一些返回值。这或许是大部分写命令式编程语言的人心中对于函数所理解的了，即使是对于使用函数式编程开发的人，函数的概念多多少少与数学上也是有出入的。正因为在不同领域对函数的定义与概念都不一样，因此先让我们定义函数这个概念究竟是什么。</p><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>首先我们来回顾一下我在范畴论上一章对于态射（Morphism）与组合（Compose）的概念，且我们得知态射其实是可以被直接作为函数来看待的，在这里要再补充的是：对象（Object）在态射这个过程中不仅仅只是存在一个对象，而是可以有一个或多个对象在同时态射，就例如我们在数学上不仅可以定义两个整数为对象，然后把它们相加在一起（像 $5 + 8$ 这样），而加法本身也是个函数，而且这条函数本身并不仅能接受 $5$ 作为一个参数，然后返回 $8$，而是根据具体这条函数的定义域（Domain）来决定所接受的参数都有什么（例如在这我们设为 $\forall x.x \in \mathbb Z$），再把集合内的所有整数加上另外一个整数（例如 <code>map (+3) [1,2,3]</code> 或 $x + 3$），最后输出到新的集合 $Y$ 上，正如下图这样：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/mapping-1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br>集合 $X$ 是作为定义域（Domain）出现的，然后我们把 $X$ 当中的元素给态射到集合 $Y$，即像 / 值域（Image / Range）上，因此使用映射关系也可以公理化成这样：$X \xrightarrow[f]{} Y$。</p><h3 id="函数关系（Relationship-of-function）"><a href="#函数关系（Relationship-of-function）" class="headerlink" title="函数关系（Relationship of function）"></a>函数关系（Relationship of function）</h3><p>既然在概念上我们提到，函数之间的关系可以以集合映射的形式表示出来，因为这样可以更清晰地描述其中的关系。下面我们不妨来粗略地了解下函数的映射关系吧（详尽的定义可以参考维基）。</p><h4 id="陪域与值域（或像）（Codomain-and-Range（or-Image））"><a href="#陪域与值域（或像）（Codomain-and-Range（or-Image））" class="headerlink" title="陪域与值域（或像）（Codomain and Range（or Image））"></a>陪域与值域（或像）（Codomain and Range（or Image））</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/mapping-2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>要谈及到陪域的概念，首先我们需要了解一下值域（或像）的概念，值域就相等于函数实际输出的集合，例如我们说有一条函数 $f : \mathbb Z \mapsto \mathbb Z$，定义为 $f(x) = x + 2$，而定义域的则取于 $[0,2]$ 区间之间，因此对于给定的输入 $0, 1, 2$，可得到实际输出 $2, 3, 4$，实际上这些也就是值域内的对象。</p><p>那么培域（Codomain）呢？它其实就相当于一个于一个函数的可能输出范围，那什么叫 “可能输出的范围” 呢？由于我们上面给定的定义域只有 $0, 1, 2$ 这三个数，但我们千万不能忽视除了这几个数以外，对于这条函数来讲其实是可以接受其他整数 $x \in \mathbb Z$ 作为输入的，所以其实我们可能还有 ${…,-3,-2,-1,0,1,2,3,…}$ 等等的作为输入的集合，然后对应的可能输出也就是培域（也是值域的超集，$Codomain \supseteq Range$）了。</p><h4 id="单射函数（Injective-function）"><a href="#单射函数（Injective-function）" class="headerlink" title="单射函数（Injective function）"></a>单射函数（Injective function）</h4><p>相较于满射函数，单射函数也就是单独，单一的意思，也即是对于定义域所有的对象，并不会映射到值域上的所有对象，只有部分被一一对应地映射。换句话说就是值域与培域在这种情况下是不相等的，此时值域必然会小于培域（如果相等的话就变成满射函数了）。</p><p>具体定义为：<br>若满足 $\forall x_1,x_2 \in X, f(x_1) = f(x_2)$，则 $f : X \to Y$ 为一单射函数。</p><h4 id="满射函数（Surjective-function）"><a href="#满射函数（Surjective-function）" class="headerlink" title="满射函数（Surjective function）"></a>满射函数（Surjective function）</h4><p>满射的含义为完满，完全，所有的意思，也就是指对于在定义域上的所有对象，都必定映射到值域上的任一对象，因此我们 “不会错过” 任何一个输出，即便出现多对一映射的情况。所以说对于所有输出不仅仅是可能的，而且是必然的，最终的结果就是值域会直接等同于培域。</p><p>具体定义为：<br>若满足 $\forall y \in Y, \exists x \in X, f(x) = y$，则 $f : X \to Y$ 为一满射函数。</p><h4 id="双射函数（Bijective-function）"><a href="#双射函数（Bijective-function）" class="headerlink" title="双射函数（Bijective function）"></a>双射函数（Bijective function）</h4><p>透过观察在概念中 $X \xrightarrow[f]{} Y$ 的例子我们得知，左边的集合（定义域）与右边集合（像 / 值域）的对象是全部对应起来的，因为我们上面的定义域为 $\forall x.x \in \mathbb Z$（也就是对于所有 $x$，它们都属于整数这个集合），且是一一对应的，也就是 $1 \to 2$，$2 \to 3$，$3 \to 6$ 这样，它们并不会形成类似多对一，一对多的关系。因此我们可以把这种关系称之为双射（满射且单射）。</p><h4 id="反函数与原像（Inverse-function-and-Preimages）"><a href="#反函数与原像（Inverse-function-and-Preimages）" class="headerlink" title="反函数与原像（Inverse function and Preimages）"></a>反函数与原像（Inverse function and Preimages）</h4><h5 id="函数可逆性（Function-invertibility）"><a href="#函数可逆性（Function-invertibility）" class="headerlink" title="函数可逆性（Function invertibility）"></a>函数可逆性（Function invertibility）</h5><h4 id="并不属于函数范畴的态射关系"><a href="#并不属于函数范畴的态射关系" class="headerlink" title="并不属于函数范畴的态射关系"></a>并不属于函数范畴的态射关系</h4><p>上面已经列出部分函数的基础关系，下面我们来看一些 “很像函数但又并不是函数” 的函数。</p><h5 id="多值函数（Multivalued-function）"><a href="#多值函数（Multivalued-function）" class="headerlink" title="多值函数（Multivalued function）"></a>多值函数（Multivalued function）</h5><p>由于数学上函数的定义每一个输入都只能够对应一个输出，而多值函数也就是一对多的字面意思，所以多值函数并不是一条函数。在数学上最显然的例子就是求根公式得出来的结果有可能是正或者负，如果得出来的结果例如只有一个正整数或者负整数那就是很正常的一条函数，但若果得出来的结果可能是出现多个的，例如 {$-2, 2$}，那这个就是属于多值函数了。而之所以为什么我们看到当今计算机语言的函数并不能直接拥有多返回值（顶多也只能够返回一个 <code>Array</code> <code>List</code> <code>Tuple</code> <code>Pair</code> <code>Set</code> 之类的容器），究其原因其实也在这里。</p><h5 id="偏函数（Partial-function）"><a href="#偏函数（Partial-function）" class="headerlink" title="偏函数（Partial function）"></a>偏函数（Partial function）</h5><p>偏函数指的是在定义域内，有一个或多个对象并未映射到值域内，而这种情况就好比我们日常开发的时候，写一条函数，接受两个参数，但第一个参数从始至终都未在函数体内被间接或直接地引用过，也就是 <code>Unused parameter</code>，这种看似是能写的出来的函数实际上也并不是一条函数。</p><h2 id="范畴关系（Category-Relationship）"><a href="#范畴关系（Category-Relationship）" class="headerlink" title="范畴关系（Category Relationship）"></a>范畴关系（Category Relationship）</h2><p>请不要忘记我们的目标是什么，在上面介绍完函数的基本关系之后并不是代表就结束了，那仅仅只是函数上关系而已，而我们还有对于范畴论内的态射关系没谈呢！所以现在让我们来开始一起看看吧。</p><h3 id="同态（Homomorphism）"><a href="#同态（Homomorphism）" class="headerlink" title="同态（Homomorphism）"></a>同态（Homomorphism）</h3><p>同态含义为 “相同的形态”，也就是指在映射时保持两个代数结构上它们相同形态不变。对于函数上有不同种类的函数类型（例如上面单射 / 满射 / 双射函数等等），在范畴论上的态射种类也就被称为同态了。</p><h3 id="单同态（Monomorphism（Monic））"><a href="#单同态（Monomorphism（Monic））" class="headerlink" title="单同态（Monomorphism（Monic））"></a>单同态（Monomorphism（Monic））</h3><p>单同态在范畴论上的概念几乎等同于集合论（或集合范畴 $C_{Set}$）的单射函数，对于范畴 $C$ 内，我们有 $g_x : C \to A$ 以及 $f : A \to B$，对于态射 $g_1, g_2$，若它们均与 $f$ 结合，即 $f \circ g_1$ 与 $f \circ g_2$ 隐含了 $g_1 = g_2$（这里我们可以左消除（Left cancellable）$f$，像这样：$\require{cancel} \cancel{f \circ} g_1 = \cancel{f \circ} g_2$），满足这个条件时我们称 $A \rightarrowtail B$ 是单同态的。</p><h3 id="满同态（Epimorphism（Epic））"><a href="#满同态（Epimorphism（Epic））" class="headerlink" title="满同态（Epimorphism（Epic））"></a>满同态（Epimorphism（Epic））</h3><p>满同态在范畴论上的概念几乎等同于集合论（或集合范畴 $C_{Set}$）的满射函数，在这里我们不妨也给出 $f : A \to B$ 以及 $g_x : B \to C$，对于态射 $g_1$, $g_2$，若它们均与 $f$ 结合，即 $g_1 \circ f$ 与 $g_2 \circ f$ 隐含了 $g_1 = g_2$ （因为我们可以右消除（Right cancellable） $f$，像这样：$g_1 \require{cancel} \cancel{\circ f} = g_2 \cancel{\circ f}$），所以 $A \twoheadrightarrow B$ 是满同态的。</p><h3 id="同构（Isomorphism）"><a href="#同构（Isomorphism）" class="headerlink" title="同构（Isomorphism）"></a>同构（Isomorphism）</h3><p>同构的皆指在范畴在态射之间保持了不变的结构，换句话说就是一样的结构，假设我们有态射 $f : A \to B$，若这个态射是同构关系，那么它肯定保留了可逆以及对称性，所以有 $g : B \to A$。而因每个对象本身都存在单位元，例如每次当 $g \circ f$ 绕回来的时候其实也就等同于 $id_A$，因此保有如下性质：$g \circ f = id_A$ 以及 $f \circ g = id_B$。</p><p>而在 Haskell 中我们能很简单的定义一个类型表示同构关系：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type ISO a b = (a -&gt; b, b -&gt; a)</span><br></pre></td></tr></table></figure></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本篇略略介绍了一些简单的基础函数与同态的关系，所以当然关系是不止这么一点的，后续会慢慢提及到。而了解清楚这些关系之后在写代码时也有助于看清楚函数背后的细节与作用，使逻辑条理更为清晰。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;要说到函数与类型，只要是个写带有类型系统的编程语言，都应该很熟悉，因为我们天天都会接触到。但是对于在范畴论上，或更广义地我们指在数学上的函数
      
    
    </summary>
    
    
      <category term="函数式编程" scheme="http://blog.e7mc.com/tags/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    
      <category term="范畴论" scheme="http://blog.e7mc.com/tags/%E8%8C%83%E7%95%B4%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>一个 Haskeller 的范畴论入坑笔记 第一章: 组合的本质</title>
    <link href="http://blog.e7mc.com/2019/07/19/Category-Theory-1/"/>
    <id>http://blog.e7mc.com/2019/07/19/Category-Theory-1/</id>
    <published>2019-07-19T11:13:32.000Z</published>
    <updated>2019-08-31T04:33:25.592Z</updated>
    
    <content type="html"><![CDATA[<p>在入坑接触 Haskell 一段时间后，碰到很多类似 <code>Functor</code> <code>Applicative</code> <code>Monad</code> 等等这些诸如此类的 “魔法”，虽然有时候用是会用了，利用各种自定义的 Monad instance 也实际优化了 FP （Functional Programming） 工程上的代码，但是回头一看 Monad（单子）这个神奇的词，仔细想想又并不这么简单能够解释，一查发现其中又牵涉出 <code>Monoid（么半群）</code> <code>Semigroup（半群）</code> 等等这些群论以至于范畴论上的概念出来。于是乎为了能够 <ruby>彻底弄清楚这一大堆东西<rp> (</rp><rt>mǎn zú hào qí xīn</rt><rp>) </rp></ruby>（顺便记录下学习的过程），特意开了本篇作为学习笔记，也希望能够记录这个入坑 <ruby>猫论<rp> (</rp><rt>Category Theory</rt><rp>) </rp></ruby> 到入土的心路历程（笑。</p><h2 id="概念（Concept）"><a href="#概念（Concept）" class="headerlink" title="概念（Concept）"></a>概念（Concept）</h2><blockquote><p>研究范畴就是试图以“公理化”的方法抓住在各种相关连的“数学结构”中的共同特性，并以结构间的“结构保持函数”将这些结构相关起来。因此，对范畴论系统化的研究将允许任何一个此类数学结构的普遍结论由范畴的公理中证出。</p></blockquote><p>范畴论这门学问，虽然分类上是属于数学的基础内容，但个人（以作为 Haskeller 的角度）反倒觉得像是一门 “数学上的抽象语言”。就如同上面引文提及：它负责对数学结构中的共同特性，加以公理化的形式把这一个个的数学结构连接起来。举个例子：就如同数学上最简单的加减乘除这些 “二元运算”，均能被视为是一种连接两个数学结构之间的一个公理化的连接，因此才被称为 “二元运算”。</p><h2 id="对象与态射（Object-and-Morphism）"><a href="#对象与态射（Object-and-Morphism）" class="headerlink" title="对象与态射（Object and Morphism）"></a>对象与态射（Object and Morphism）</h2><p>通俗地讲，一个最简单的范畴结构可以由一个 <code>对象（Object）</code> 与 <code>态射（Morphism）</code> 组合而成的，一个对象可以是任何东西（例如一个自然数或是个英文字母等等），而态射就相等于对象变换的过程，然后把一个个对象之间像是加上了一个个箭头（Arrow）一样将它们逐一连接起来，首先由对象 $A$ 态射到对象 $B$ ，最终由对象 $B$ 再态射到对象 $C$，正如这样：$$ A \to B \to C $$ 从上面我们可以很清晰的看到似乎就只是加上了箭头作为对象之间的连接，就形成了一个包含三个对象，两次态射的范畴了。</p><h2 id="组合（Composition）"><a href="#组合（Composition）" class="headerlink" title="组合（Composition）"></a>组合（Composition）</h2><p>现在我们要提及到另一个重要的概念：<code>组合（Composition）</code>。上面对象与态射的小章节已经举出了一个简单的范畴例子，实际上我们可以为上面的态射给命名一下，例如改成这样：$$ A \xrightarrow[f]{} B \xrightarrow[g]{} C $$ 于是乎现在会更加直观地看到态射的名字了，我们设对象 $A$ 到 $B$ 的态射称为 $f$ ，而从对象 $B$ 到 $C$ 的态射为 $g$，最终由于对象 $A$ $B$ $C$ 会透过态射形成一个具备可传递性质的范畴，对象 $A$ 态射到 $C$ 的时候就会形成一个态射的组合（Composition of morphism），因此可以演变成这样：$$ A \xrightarrow[g \circ f]{} C $$ 我们看到上面由 $A$ 到 $C$ 的过程实际就是把 态射 $g$ 和 $f$ 给组合起来，形成一个新的复合态射，称之为 $g \circ f$。</p><h3 id="在-Haskell-上的函数组合"><a href="#在-Haskell-上的函数组合" class="headerlink" title="在 Haskell 上的函数组合"></a>在 Haskell 上的函数组合</h3><p>众所周知很多图灵完全的编程语言上，函数不仅仅只能接受一个或多个参数，并且返回一个返回值，而是可以在满足下列至少任一条件：</p><ol><li>一个函数接受一个或多个函数作为输入</li><li>输出一个函数</li></ol><p>的情况下，作为一个普通函数使用，而这一概念也就是为人熟知的 <code>高阶函数（Higher-order function）</code>。那么当然在 Haskell 中也不例外，比方说我们现在有两条函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">trim  :: String -&gt; String</span><br><span class="line">lower :: String -&gt; String</span><br></pre></td></tr></table></figure></p><p>分别是首先对字符串清除空格和后续的把字符串转换为全小写的函数。现在我们可以简单地把它们组合在一起，形成一个复合函数，在 Haskell 里面以 Point-free 形式写出来的代码大概像是这样：<code>lower . trim</code>，就已经成为了一个简单的函数组合了！</p><h2 id="组合的特性（Properties-of-Composition）"><a href="#组合的特性（Properties-of-Composition）" class="headerlink" title="组合的特性（Properties of Composition）"></a>组合的特性（Properties of Composition）</h2><p>组合（Composition）有两个非常重要的特性，在任何范畴内都必须满足这些特性，才能被称之为组合。</p><h3 id="结合律（Associative-Property）"><a href="#结合律（Associative-Property）" class="headerlink" title="结合律（Associative Property）"></a>结合律（Associative Property）</h3><p>组合是可结合的，也就是指出一个二元运算（这里是组合）只要它们算子（态射）的位置没有被改变，那就不会对整个组合过程的结果产生影响，也就是即使我们给组合加上改变优先级的运算符（例如括号），也并不会改变整个过程的结果。现在给出三个对象，它们分别是 $f$，$g$，$h$。然后把它们组合到一起：$$(h \circ g) \circ f = h \circ (g \circ f) = h \circ g \circ f$$ 最终可以看出它们的结果均是恒等的。</p><h3 id="单位元（Identity）"><a href="#单位元（Identity）" class="headerlink" title="单位元（Identity）"></a>单位元（Identity）</h3><p>单位元就如同一个特殊的单位（Unit），任何对象与其组合结果都会返回对象自身：$$ A \xrightarrow[id_A]{} A $$ $$f \circ id_A = id_A \circ f = f $$ 但要切记，上面的单位元 $id_A$ 依旧是一种态射，只不过组合后的结果还是落入了与 $f$ 同一个范畴内。就如同 $2 * 1$一样（$1$ 是乘法单位元），它的运算结果永远都只会是整数（这里的范畴可以是整数乘法群，且群论上已定义了封闭性，所以结果不会是其他什么像是字符串，其他类型的自然数等等的这类东西），且最终它运算得出来的结果都会是等于 $2$，也就是等于自身，因此 $1$ 便符合了作为乘法单位元的特性。</p><h2 id="组合的哲学（Philosophy-of-Composition）"><a href="#组合的哲学（Philosophy-of-Composition）" class="headerlink" title="组合的哲学（Philosophy of Composition）"></a>组合的哲学（Philosophy of Composition）</h2><p>要讲到组合的本质，它不仅仅只是在 物理学 / 数学 领域下某些分支的概念，或是函数式编程领域公理化或简化实际问题的 “东西”。从计算机的角度出发的话，它表示成一个个的过程，例如说实际编写 Haskell / Java / C++ 等等这些 Higher-Level 编程语言的代码，经过编译这个过程，实际上看似也很类似于态射这个概念，然后把这些代码 “自然转换” 为机器读的懂的东西，最终再由承载执行该语言的虚拟机，或者是 Runtime 负责运行，这一系列的过程连接起来也就形成了一个组合，而这个组合最终代表的就是一个完整的范畴，甚至某种程度上我们可以说我们日常生活遇到的各种事情都可以是一个范畴，而不仅仅是一个集合。范畴本身不仅可以被当成一个分类，而且他还可以把多个小分类给 “连接” 起来，解决一个很复杂很困难的事。在计算机领域最为直接的例子就是现代 CPU 的架构，其逻辑或线路布局复杂程度显然相当的高，但还是分出了 ALU，CU，寄存器，各种总线 等等的这些概念，然后把它们组合在一起运行。其次也就是我们日常编写代码时，如果没有这样化简归纳成一个个范畴的概念，那么现在的程序员可能每时每刻都只能用二进制去编写程序了，导致编写一个程序的门槛不知道高了多少多少，计算机领域的发展也就十分局限了。</p><h2 id="总结（Conclusion）"><a href="#总结（Conclusion）" class="headerlink" title="总结（Conclusion）"></a>总结（Conclusion）</h2><p>以上便是本章节的内容了，本篇作为第一节可能会较少讲述实质在范畴论上的内容，而概念较多也是为了帮助自己和读者能够理解及学习到范畴论上的概念，作为日后深入范畴论的一个垫脚石。</p><h2 id="外部链接（Outside-Links）"><a href="#外部链接（Outside-Links）" class="headerlink" title="外部链接（Outside Links）"></a>外部链接（Outside Links）</h2><p>本文部分内容参考或引用至下列网页，也可供作为额外的延伸资源帮助阅读：</p><ul><li><a href="https://zh.wikipedia.org/wiki/%E8%8C%83%E7%95%B4%E8%AE%BA" target="_blank" rel="noopener">范畴论 - Wikipedia</a></li><li><a href="https://bartoszmilewski.com/2014/11/04/category-the-essence-of-composition/" target="_blank" rel="noopener">Category: The Essence of Composition - Bartosz Milewski</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在入坑接触 Haskell 一段时间后，碰到很多类似 &lt;code&gt;Functor&lt;/code&gt; &lt;code&gt;Applicative&lt;/code&gt; &lt;code&gt;Monad&lt;/code&gt; 等等这些诸如此类的 “魔法”，虽然有时候用是会用了，利用各种自定义的 Monad inst
      
    
    </summary>
    
    
      <category term="函数式编程" scheme="http://blog.e7mc.com/tags/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    
      <category term="范畴论" scheme="http://blog.e7mc.com/tags/%E8%8C%83%E7%95%B4%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>Codewars: Haskell Five Fundamental Monads</title>
    <link href="http://blog.e7mc.com/2019/06/24/Codewars-Five-Fundamental-Monads/"/>
    <id>http://blog.e7mc.com/2019/06/24/Codewars-Five-Fundamental-Monads/</id>
    <published>2019-06-24T11:32:13.000Z</published>
    <updated>2019-06-25T13:24:24.478Z</updated>
    
    <content type="html"><![CDATA[<p>This kata corresponds to <a href="https://www.codewars.com/kata/547202bdf7587835d9000c46" target="_blank" rel="noopener">Five-Fundamental-Monads</a> in Codewars<br>Difficulty: 4 kyu<br>Tags: <code>FUNDAMENTALS</code> <code>MONADS</code> <code>DATA STRUCTURES</code> <code>FUNCTIONAL PROGRAMMING</code></p><h2 id="Questions"><a href="#Questions" class="headerlink" title="Questions"></a>Questions</h2><p>In this kata we will implement five of the most fundamental monads.</p><p>Newcomers to Haskell find monads to be one of the most intimidating concepts but on a basic level - they are not too difficult to understand.</p><p>A datatype forms a monad if it is possible to complete the following definitions such that the monad laws (described below) hold. There’s nothing more to it! For a more intuitive understanding then there are a plethora of tutorials which use (sometimes wild) analogies to explain this concept.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">class Monad m where</span><br><span class="line">    return :: a -&gt; m a</span><br><span class="line">    (&gt;&gt;=) :: m a -&gt; (a -&gt; m b) -&gt; m b</span><br></pre></td></tr></table></figure></p><p>Monad laws<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">return x &gt;&gt;= f = f x</span><br><span class="line">m &gt;&gt;= return = m</span><br><span class="line">(m &gt;&gt;= f) &gt;&gt;= g = m &gt;&gt;= (\x -&gt; f x &gt;&gt;= g)</span><br></pre></td></tr></table></figure></p><p>It turns out that many different types of computation can be encapsulated by monads. For example the Maybe monad encapsulates a computation which can fail and State a computation with mutable state.</p><p>The five we will implement here are <code>Identity</code>, <code>Maybe</code>, <code>State</code>, <code>Writer</code> and <code>Reader</code>.</p><p>Hint: <a href="https://www.haskell.org/haskellwiki/Monad_tutorials_timeline" target="_blank" rel="noopener">https://www.haskell.org/haskellwiki/Monad_tutorials_timeline</a></p><p>Note: Please feel free to contribute!</p><h2 id="Sources-Code"><a href="#Sources-Code" class="headerlink" title="Sources Code"></a>Sources Code</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&#123;-# LANGUAGE NoImplicitPrelude #-&#125;</span><br><span class="line">module Monads where</span><br><span class="line"></span><br><span class="line">import Prelude hiding (Monad, Identity, Maybe(..), State, Reader, Writer)</span><br><span class="line">import Data.Monoid</span><br><span class="line"></span><br><span class="line">class Monad m where</span><br><span class="line">  return :: a -&gt; m a</span><br><span class="line">  (&gt;&gt;=) :: m a -&gt; (a -&gt; m b) -&gt; m b</span><br><span class="line"></span><br><span class="line">data Identity a = Identity a</span><br><span class="line">  deriving (Show, Eq)</span><br><span class="line"></span><br><span class="line">data Maybe a = Nothing | Just a</span><br><span class="line">  deriving (Show, Eq)</span><br><span class="line"></span><br><span class="line">data State s a = State &#123;runState :: s -&gt; (a, s)&#125;</span><br><span class="line"></span><br><span class="line">data Reader s a = Reader &#123;runReader :: s -&gt; a &#125;</span><br><span class="line"></span><br><span class="line">data Writer w a = Writer &#123;runWriter :: (w, a)&#125;</span><br><span class="line"></span><br><span class="line">instance Monad Identity where</span><br><span class="line">  return = undefined</span><br><span class="line">  (Identity v) &gt;&gt;= f = undefined</span><br><span class="line"></span><br><span class="line">instance Monad Maybe where</span><br><span class="line">  return = undefined</span><br><span class="line">  Nothing &gt;&gt;= f = undefined</span><br><span class="line">  (Just v) &gt;&gt;= f = undefined</span><br><span class="line"></span><br><span class="line">instance Monad (State s) where</span><br><span class="line">  return = undefined</span><br><span class="line">  (State g) &gt;&gt;= f = undefined</span><br><span class="line"></span><br><span class="line">instance Monad (Reader s) where</span><br><span class="line">  return = undefined</span><br><span class="line">  (Reader g) &gt;&gt;= f = undefined</span><br><span class="line"></span><br><span class="line">instance Monoid w =&gt; Monad (Writer w) where</span><br><span class="line">  return = undefined</span><br><span class="line">  (Writer (s, v)) &gt;&gt;= f = undefined</span><br></pre></td></tr></table></figure><h2 id="How-to-solve"><a href="#How-to-solve" class="headerlink" title="How to solve"></a>How to solve</h2><h3 id="Identity-Monad"><a href="#Identity-Monad" class="headerlink" title="Identity Monad"></a>Identity Monad</h3><p>Above all, we need to implement the Identity monad instance at first, according to the law of identity in Category Theory: which means for every object $x$, there exists a morphism $id_x : x \mapsto x$ called the identity morphism for $x$, such that for every morphism $f : a \mapsto x$ and every morphism $g : x \mapsto b$, we have $id_x \circ f = f$ and $g \circ id_x = g$. Straightforwardly we can call this as a morphism (or function in a programming language) which always return itself, and for every morphism combine with any identity must be equals to morphism itself anyway.</p><p>By looking at Monad typeclass defination:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">class Applicative m =&gt; Monad (m :: * -&gt; *) where</span><br><span class="line">  (&gt;&gt;=) :: m a -&gt; (a -&gt; m b) -&gt; m b</span><br><span class="line">  (&gt;&gt;) :: m a -&gt; m b -&gt; m b</span><br><span class="line">  return :: a -&gt; m a</span><br><span class="line">  fail :: String -&gt; m a</span><br><span class="line">  &#123;-# MINIMAL (&gt;&gt;=) #-&#125;</span><br><span class="line">      -- Defined in ‘GHC.Base’</span><br></pre></td></tr></table></figure></p><p>So, in Haskell we can implement identity instance like this:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">instance Monad Identity where</span><br><span class="line">  return = Identity</span><br><span class="line">  (Identity v) &gt;&gt;= f = f v</span><br></pre></td></tr></table></figure></p><p><code>return</code> function was return a Identity which accepted a parameter <code>a</code> implicitly, and as explicitly can be write like this: <code>return a = Identity a</code></p><p><code>&gt;&gt;=</code> is a monad-binding operator function, means that <code>(Identity v)</code> was bound on function <code>f</code>, by looking at type definition of this function, which accept the parameter <code>m a</code>, <code>(a -&gt; m b)</code> and return the monad <code>m b</code> finally. So now let’s turn back to this instance, <code>(Identity v)</code> is the first parameter <code>m a</code> also <code>f</code> represents to <code>(a -&gt; m b)</code>, after the <code>(Identity v)</code> is done the pattern-matching, by take the parameter <code>v</code> out and put it into <code>f</code> and finally return the monad <code>m b</code>, that’s it what we need!</p><h3 id="Maybe-Monad"><a href="#Maybe-Monad" class="headerlink" title="Maybe Monad"></a>Maybe Monad</h3><p>After done the identity monad, we are learned about how to construct the simple monad in Haskell, but just the only identity? Not enough! So now I’ll start to talk about the next most useful monad in Haskell, the <code>Maybe Monad</code>.</p><p>In this monad, defined two data types: <code>Nothing</code> and <code>Just a</code>, which <code>Nothing</code> does not accept any type parameter but <code>Just a</code> will accept a type parameter <code>a</code> here. So when we hold something just like an integer 1, they we can put it into <code>Just 1</code>, but when holding nothing, then we didn’t need to put anything into <code>Just a</code>, so we use <code>Nothing</code> to alternative that.</p><p>So let’s implement <code>return</code> function on <code>Maybe Monad</code> first, it seems like the identity monad, but still have some differences. In this case, we need to specify the <code>Nothing</code> and <code>Just</code>, just take a look at the type definition of <code>return</code> function, it’s must provide a parameter <code>a</code>, then we can be wrapping it into <code>Just a</code> to becomes <code>return = Just</code> in instance.</p><p>Second, after completed <code>return</code> function, to finish the <code>&gt;&gt;=</code> function, it’s also closed to the identity instance, but we know when we put a <code>Nothing</code> into <code>f</code>, there must always return <code>Nothing</code>, otherwise return the result moand from <code>f</code>, so here could be using pattern-matching to partition these two case.</p><p>Finally the <code>Maybe Monad</code> likes:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">instance Monad Maybe where</span><br><span class="line">  return = Just</span><br><span class="line">  Nothing &gt;&gt;= f = Nothing</span><br><span class="line">  (Just v) &gt;&gt;= f = f v</span><br></pre></td></tr></table></figure></p><h3 id="State-Monad"><a href="#State-Monad" class="headerlink" title="State Monad"></a>State Monad</h3><h3 id="Reader-Monad"><a href="#Reader-Monad" class="headerlink" title="Reader Monad"></a>Reader Monad</h3><h3 id="Writer-Monad"><a href="#Writer-Monad" class="headerlink" title="Writer Monad"></a>Writer Monad</h3><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>Great thanks to Henry for fixing my noob English grammar problem!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;This kata corresponds to &lt;a href=&quot;https://www.codewars.com/kata/547202bdf7587835d9000c46&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Five-Fundamental
      
    
    </summary>
    
    
      <category term="Haskell" scheme="http://blog.e7mc.com/tags/Haskell/"/>
    
      <category term="Monad" scheme="http://blog.e7mc.com/tags/Monad/"/>
    
      <category term="Data Structures" scheme="http://blog.e7mc.com/tags/Data-Structures/"/>
    
  </entry>
  
  <entry>
    <title>Java 泛型的本质 开篇</title>
    <link href="http://blog.e7mc.com/2019/04/15/Java-generic-type-md/"/>
    <id>http://blog.e7mc.com/2019/04/15/Java-generic-type-md/</id>
    <published>2019-04-15T05:01:11.000Z</published>
    <updated>2019-07-22T09:42:09.757Z</updated>
    
    <content type="html"><![CDATA[<p>提起泛型, 或许许多人在学习 Java 的时候就遇到了不少的问题, 又或者只会用基础的特性, 但有些更加高层次根本不知道怎么用, 又或是很容易混淆, 所以就有个想法来写一下关于泛型的一些内容, 接下来可能会用数章的篇幅去讲解下究竟何为泛型, 其中又能发挥些什么作用.</p><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>待填坑…</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;提起泛型, 或许许多人在学习 Java 的时候就遇到了不少的问题, 又或者只会用基础的特性, 但有些更加高层次根本不知道怎么用, 又或是很容易混淆, 所以就有个想法来写一下关于泛型的一些内容, 接下来可能会用数章的篇幅去讲解下究竟何为泛型, 其中又能发挥些什么作用.&lt;/p&gt;
      
    
    </summary>
    
    
      <category term="Java" scheme="http://blog.e7mc.com/tags/Java/"/>
    
      <category term="类型" scheme="http://blog.e7mc.com/tags/%E7%B1%BB%E5%9E%8B/"/>
    
      <category term="参数化类型" scheme="http://blog.e7mc.com/tags/%E5%8F%82%E6%95%B0%E5%8C%96%E7%B1%BB%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>记录一次在 Linux 下增加分区大小的过程</title>
    <link href="http://blog.e7mc.com/2018/12/04/Linux-partition-sizes-modify/"/>
    <id>http://blog.e7mc.com/2018/12/04/Linux-partition-sizes-modify/</id>
    <published>2018-12-04T01:23:54.000Z</published>
    <updated>2019-07-22T09:42:36.844Z</updated>
    
    <content type="html"><![CDATA[<p>最近因为要开发一个 Android 项目，因此需要在系统上安装 AndroidStudio，安装途中却提示我 <code>java.io.IOException: No space left on device</code>，立刻就意识到分区空间不足了，因此进行了该次扩容。而我本身是双系统（Ubuntu 18.04 作为日常开发使用，而 Windows 10 作为游戏娱乐用），因此我要对 Ubuntu 下的分区进行扩容。</p><h2 id="如何扩容"><a href="#如何扩容" class="headerlink" title="如何扩容"></a>如何扩容</h2><ol><li>使用 GUI 工具：GParted （本篇文章不进行阐述）</li><li>利用 fdisk / parted / lvm 等指令进行扩容</li></ol><h2 id="提前准备"><a href="#提前准备" class="headerlink" title="提前准备"></a>提前准备</h2><ol><li>备份重要数据，很关键！！！</li><li>因为涉及到 <code>umount</code> 卸载分区操作，请制作好 LiveCD（对应 Linux 版本的 USB 启动盘）</li><li>遇到其他问题请主动查阅相关资料</li></ol><h2 id="找出空间不足的分区"><a href="#找出空间不足的分区" class="headerlink" title="找出空间不足的分区"></a>找出空间不足的分区</h2><p>首先使用 <code>df -h | grep &quot;dev/sda&quot;</code> 指令查看 <code>/dev/sda</code> 以下各个分区占用比<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> a9032676@90-Ubuntu  ~  df -h | grep &quot;sda&quot;</span><br><span class="line">/dev/sda10       22G   21G   96M 100% /</span><br><span class="line">/dev/sda8       1.9G  467M  1.3G  27% /media/a9032676/b2b692f8-bdcf-46c1-9998-503b0970f5b3</span><br><span class="line">/dev/sda9        19G  2.8G   15G  16% /media/a9032676/9b5cdc3a-f296-490a-b329-6ae23acee7de</span><br><span class="line">/dev/sda7       4.7G   20M  4.4G   1% /media/a9032676/1bbfb6fa-f919-4460-86f9-5ced5a900ec8</span><br></pre></td></tr></table></figure></p><p>可以得出挂载于 <code>/</code> 的根分区 <code>/dev/sda10</code> 空间严重不足，剩下 96MB。然后我们使用 <code>sudo fdisk -l /dev/sda</code> 指令查询 <code>/dev/sda</code> 下各分区大小及总和。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> a9032676@90-Ubuntu  ~  sudo fdisk -l /dev/sda</span><br><span class="line">Disk /dev/sda: 232.9 GiB, 250059350016 bytes, 488397168 sectors</span><br><span class="line">/dev/sda1  *         2048   1126399   1124352   549M  7 HPFS/NTFS/exFAT</span><br><span class="line">/dev/sda2         1126400 383537151 382410752 182.4G  7 HPFS/NTFS/exFAT</span><br><span class="line">/dev/sda3       383539198 488396799 104857602    50G  5 Extended</span><br><span class="line">/dev/sda5       383539200 383928319    389120   190M 83 Linux</span><br><span class="line">/dev/sda6       383930368 387928063   3997696   1.9G 82 Linux swap / Solaris</span><br><span class="line">/dev/sda7       387930112 397928447   9998336   4.8G 83 Linux</span><br><span class="line">/dev/sda8       397930496 401928191   3997696   1.9G 83 Linux</span><br><span class="line">/dev/sda9       401930240 441927679  39997440  19.1G 83 Linux</span><br><span class="line">/dev/sda10      441929728 488396799  46467072  22.2G 83 Linux</span><br><span class="line"> a9032676@90-Ubuntu  ~ </span><br></pre></td></tr></table></figure></p><p>可以看到这个盘大小总和是 232.9G，而由于双系统的缘故， <code>/dev/sda1</code> 与 <code>/dev/sda2</code> 这两个分区是 Windows 10 的，因此是 NTFS 文件系统。<code>/dev/sda5</code> 为 <code>grub</code> 预留分区，而扩展分区 <code>/dev/sda3</code> 则作为我 Ubuntu 系统所有文件的主分区，可以看见扇区从 <code>383539198</code> 横跨到 <code>488396799</code>，途中包含了 <code>sda5</code> 到 <code>sda10</code> 这几个分区，而他们都是 ext4 文件系统的逻辑分区，加起来刚刚好 50G。</p><h2 id="查询分区挂载情况"><a href="#查询分区挂载情况" class="headerlink" title="查询分区挂载情况"></a>查询分区挂载情况</h2><p>确定了是 <code>/dev/sda10</code> 分区空间不足后，我们利用 <code>mount -l | grep &quot;/dev/sda&quot;</code> 指令查看分区实际挂载情况。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> a9032676@90-Ubuntu  ~  sudo mount -l | grep &quot;/dev/sda&quot;</span><br><span class="line">/dev/sda10 on / type ext4 (rw,relatime,errors=remount-ro,data=ordered)</span><br><span class="line">/dev/sda8 on /media/a9032676/b2b692f8-bdcf-46c1-9998-503b0970f5b3 type ext4 (rw,nosuid,nodev,relatime,data=ordered,uhelper=udisks2)</span><br><span class="line">/dev/sda9 on /media/a9032676/9b5cdc3a-f296-490a-b329-6ae23acee7de type ext4 (rw,nosuid,nodev,relatime,data=ordered,uhelper=udisks2)</span><br><span class="line">/dev/sda7 on /media/a9032676/1bbfb6fa-f919-4460-86f9-5ced5a900ec8 type ext4 (rw,nosuid,nodev,relatime,data=ordered,uhelper=udisks2)</span><br></pre></td></tr></table></figure><p>从以上情况总括出：这台电脑两个系统都是安装在了同一个盘上面（因为是 SSD），合计可用大小是 232.9G，而分给 Ubuntu 的总共有 50G，Windows 则占用了 182.4G（撇除系统保留的 549M）。但现在 Ubuntu 挂载在根目录的分区 <code>/dev/sda10</code> 已经所剩无几，因此我打算的是从 Windows 处 <code>/dev/sda2</code> 释放 30G 的空间为 <code>/dev/sda10</code> 增加容量。</p><h2 id="开始调整"><a href="#开始调整" class="headerlink" title="开始调整"></a>开始调整</h2><ol><li><p>重启电脑，将系统更换成 Windows 10。</p></li><li><p>在【磁盘管理】处压缩 NTFS 卷/分区，释放已分配空间给予 Ubuntu 使用，这里我共计在 <code>/dev/sda2</code> 处压缩并腾出了共计 30G 的未分配空间。（本步骤不多作阐述，具体可参考：<a href="https://support.microsoft.com/zh-cn/help/944248" target="_blank" rel="noopener">如何在 Windows 中对硬盘进行分区</a>）</p></li><li><p>因为途中涉及根分区前后移动，因此必须要让本身处于 busy（忙碌） 状态的根分区先 <code>unmount</code> （卸载分区），否则会一直锁定着，无法移动。制作对应 Ubuntu 版本的 LiveCD（USB启动盘）。</p></li><li><p>重启电脑并插入刚刚制作好的 USB，切换系统到 USB 搭载的 Ubuntu 系统上。</p></li><li><p>进入系统后。于命令行内手动输入 <code>sudo umount /dev/sda10</code>，把我们的目标分区卸载掉，同时需要将扩展分区内的 Swap Space（交换空间）关闭掉：<code>sudo swapoff -a</code>。</p></li><li><p>然后使用 <code>sudo fdisk /dev/sda</code> 进入 fdisk 命令交互界面以调整分区：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> a9032676@90-Ubuntu  ~  sudo fdisk /dev/sda</span><br><span class="line">[sudo] password for a9032676: </span><br><span class="line"></span><br><span class="line">Welcome to fdisk (util-linux 2.31.1).</span><br><span class="line">Changes will remain in memory only, until you decide to write them.</span><br><span class="line">Be careful before using the write command.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Command (m for help):</span><br></pre></td></tr></table></figure></li><li><p>然后我们使用 <code>p</code> 指令查询分区情况，虽然上面已经查询过，但为了安全起见还是先确认一遍。</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Command (m for help): p</span><br><span class="line">Disk /dev/sda: 232.9 GiB, 250059350016 bytes, 488397168 sectors</span><br><span class="line">Units: sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">Disklabel type: dos</span><br><span class="line">Disk identifier: 0xdefb6f09</span><br><span class="line"></span><br><span class="line">Device     Boot     Start       End   Sectors   Size Id Type</span><br><span class="line">/dev/sda1  *         2048   1126399   1124352   549M  7 HPFS/NTFS/exFAT</span><br><span class="line">/dev/sda2         1126400 320622591 319496192 152.4G  7 HPFS/NTFS/exFAT</span><br><span class="line">/dev/sda3       383539198 488396799 104857602    50G  5 Extended</span><br><span class="line">/dev/sda5       383539200 383928319    389120   190M 83 Linux</span><br><span class="line">/dev/sda6       383930368 387928063   3997696   1.9G 82 Linux swap / Solaris</span><br><span class="line">/dev/sda7       387930112 397928447   9998336   4.8G 83 Linux</span><br><span class="line">/dev/sda8       397930496 401928191   3997696   1.9G 83 Linux</span><br><span class="line">/dev/sda9       401930240 441927679  39997440  19.1G 83 Linux</span><br><span class="line">/dev/sda10      441929728 488396799  46467072  22.2G 83 Linux</span><br></pre></td></tr></table></figure><p>可以看到在 <code>/dev/sda2</code> 的扇尾 <code>320622591</code> 与 <code>/dev/sda3</code> 的扇头 <code>383539198</code> 之间差了 <code>62916607</code> 个 Blocks，刚好 30G，也就是我们之前在 Windows 上腾出来的空间。</p><ol start="8"><li>接下来这一步很关键，由于在我们上面的分区里面，没分配空间是处于扩展分区 <code>/dev/sda3</code> 以及 <code>/dev/sda10</code> 的前面（左侧），而我们需要先将其移动到靠近我们的 <code>/dev/sda10</code> 分区右侧（也就是把 free space 移动到整个盘最后面）方可与 <code>/dev/sda10</code> 逻辑分区进行合并，因此我们需要用到 <code>dd</code> 这条指令去操作分区移动：</li></ol><p>待补充</p><ol start="9"><li>但由于我们这里的例子 <code>/dev/sda10</code> 本身已经处于整个盘的最后方，因此可以直接使用 fdisk 的 <code>d</code> 与 <code>n</code> 指令直接合并已经移动到 <code>/dev/sda10</code> 左侧旁的 free space，而省去了最后的从 <code>/dev/sda10</code> 左侧移动到其的右侧。</li></ol><p>待补充</p><ol start="10"><li>在一轮操作完成之后，再输入 <code>p</code> 查询分区表究竟是否有误，再三确认后输入 <code>w</code> 保存变更并退出。</li></ol><p>待补充</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近因为要开发一个 Android 项目，因此需要在系统上安装 AndroidStudio，安装途中却提示我 &lt;code&gt;java.io.IOException: No space left on device&lt;/code&gt;，立刻就意识到分区空间不足了，因此进行了该次扩容。
      
    
    </summary>
    
    
      <category term="硬盘分区" scheme="http://blog.e7mc.com/tags/%E7%A1%AC%E7%9B%98%E5%88%86%E5%8C%BA/"/>
    
      <category term="Linux" scheme="http://blog.e7mc.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>让 Lambda 特性使你的 Kotlin 代码更加优雅</title>
    <link href="http://blog.e7mc.com/2018/11/22/Lambda-make-code-more-elegant-on-Kotlin/"/>
    <id>http://blog.e7mc.com/2018/11/22/Lambda-make-code-more-elegant-on-Kotlin/</id>
    <published>2018-11-21T17:20:36.000Z</published>
    <updated>2019-07-22T09:43:19.555Z</updated>
    
    <content type="html"><![CDATA[<p>相信近年来，也许有这么一批人会认为 Java 语法过于保守及传统，代码写起来就显得有点臃肿了，不直观也不方便，而相对于 Java 而言，Kotlin 虽然与 Java 同属 JVM 平台衍生出来的计算机语言，Kotlin 的语法却比起 Java 来讲有更大的语法自由度（这里仅从语法角度分析），因此我们得以很好地实现某些看起来更简洁更方便的写法，就如同我们今天要讲的主题：在 Kotlin 上让你的代码更加优雅。</p><h2 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h2><p>System：Ubuntu 18.04<br>IDE：IntelliJ IDEA 2018.2.5<br>JDK version：1.8.0_181（Java 8）<br>Kotlin version：1.3.10（Kotlin 1.3）</p><h2 id="DSL-是什么？"><a href="#DSL-是什么？" class="headerlink" title="DSL 是什么？"></a>DSL 是什么？</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>阅读本篇文章要求读者应清晰地认识 DSL 的概念，以及 Kotlin Lambda 的思想。<br>关于 DSL 可参考我择写的另外一篇文章：</p><h3 id="对于-Kotlin-而言，DSL-的思维究竟可以对代码有什么实际帮助？"><a href="#对于-Kotlin-而言，DSL-的思维究竟可以对代码有什么实际帮助？" class="headerlink" title="对于 Kotlin 而言，DSL 的思维究竟可以对代码有什么实际帮助？"></a>对于 Kotlin 而言，DSL 的思维究竟可以对代码有什么实际帮助？</h3><p>如果你已经阅读过上面的文章，应该能够明白到 DSL 应在特定领域发挥作用的重要性，而在 Kotlin 上也是如此。如果你是使用 <code>IntelliJ IDEA</code> 作为你的 IDE，那么在你学习 Kotlin 的时候肯定会使用到内置的 <code>Java to Kotlin converter（J2KC）</code>，也就是把复制后的 Java 的代码粘贴到 <code>.kt</code> 文件后自动转换成 Kotlin 代码，如下面 JavaFX 创建布局的示例：</p><p>原本的 Java 代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public void create() &#123;</span><br><span class="line">    Label label = new Label(&quot;This is label&quot;);</span><br><span class="line">    label.setStyle(&quot;-fx-font-weight: bold;&quot;);</span><br><span class="line">    label.setTextFill(Color.web(&quot;0069B1&quot;));</span><br><span class="line"></span><br><span class="line">    Rectangle rectangle = new Rectangle(46.0, 18.0);</span><br><span class="line">    rectangle.setArcHeight(10.0);</span><br><span class="line">    rectangle.setArcWidth(10.0);</span><br><span class="line">    rectangle.setFill(Color.web(&quot;#CCEEFF&quot;));</span><br><span class="line">    rectangle.setPadding(new Insets(2.0, 3.0, 2.0, 3.0));</span><br><span class="line"></span><br><span class="line">    StackPane stack = new StackPane();</span><br><span class="line">    stack.setHgap(10);</span><br><span class="line">    stack.setVgap(10);</span><br><span class="line">    stack.children.addAll(rectangle, label);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>透过 <code>J2KC</code> 之后自动转换的 Kotlin 代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">fun create() &#123;</span><br><span class="line">    val label = Label(&quot;This is label&quot;)</span><br><span class="line">    label.style(&quot;-fx-font-weight: bold;&quot;)</span><br><span class="line">    label.textFill(Color.web(&quot;0069B1&quot;))</span><br><span class="line"></span><br><span class="line">    val rectangle = Rectangle(46.0, 18.0)</span><br><span class="line">    rectangle.arcHeight(10.0)</span><br><span class="line">    rectangle.arcWidth(10.0)</span><br><span class="line">    rectangle.fill(Color.web(&quot;#CCEEFF&quot;))</span><br><span class="line">    rectangle.padding(Insets(2.0, 3.0, 2.0, 3.0))</span><br><span class="line"></span><br><span class="line">    val stack = StackPane()</span><br><span class="line">    stack.hgap(10)</span><br><span class="line">    stack.vgap(10)</span><br><span class="line">    stack.children.addAll(rectangle, label)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们来回顾下上面代码的转化过，首先 <code>J2KC</code> 分别自动将函数标签从 <code>public void create()</code> 简化成了 <code>fun create()</code>，而因为在 Java 里返回值为 <code>void</code> 而在 Kotlin 里的后置类型声明 <code>fun create(): Unit</code> 可以直接被简化掉。除此以外还有包含对局部变量类型声明直接简化成 <code>var</code> <code>val</code> 以及在创建新实例时把 <code>new</code> 关键词直接去除。当然 <code>J2KC</code> 还有很聪明的一点，也就是能够识别出以 <code>get</code> <code>set</code> 为开头的函数名，直接将其简化成像是对一个字段进行赋值一样，而且也将以 <code>;</code> 为行结尾的符号也去掉了，看起来已经相当不错了。</p><h3 id="美中不足"><a href="#美中不足" class="headerlink" title="美中不足"></a>美中不足</h3><p>转换过程虽然简单，但也足够粗暴，我们再来观察一下转换后的结果，可以看到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">val stack = StackPane()</span><br><span class="line">stack.hgap(10)</span><br><span class="line">stack.vgap(10)</span><br><span class="line">stack.children.addAll(rectangle, label)</span><br></pre></td></tr></table></figure><p><code>stack.xxx</code> 像这样的操作实在太繁琐，每设置一个值都得事先输入 <code>stack.</code>，而且看上去代码也会显得特别密集，怎么办呢？这部分就是接下来便是我们要解决的问题了。</p><h2 id="如何优化"><a href="#如何优化" class="headerlink" title="如何优化"></a>如何优化</h2><h3 id="善用-apply-与-also-函数"><a href="#善用-apply-与-also-函数" class="headerlink" title="善用 apply() 与 also() 函数"></a>善用 apply() 与 also() 函数</h3><p>像是上面这种情况，我们可以透过 Kotlin 上一个叫 <code>apply()</code> 的函数解决！这个函数位于 Kotlin 标准库内的 <code>Standard.kt</code> 文件里，下面我直接把这一段源码贴上来：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Calls the specified function [block] with `this` value as its receiver and returns `this` value.</span><br><span class="line"> */</span><br><span class="line">@kotlin.internal.InlineOnly</span><br><span class="line">public inline fun &lt;T&gt; T.apply(block: T.() -&gt; Unit): T &#123;</span><br><span class="line">    contract &#123;</span><br><span class="line">        callsInPlace(block, InvocationKind.EXACTLY_ONCE)</span><br><span class="line">    &#125;</span><br><span class="line">    block()</span><br><span class="line">    return this</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h4><p>对于何为扩展函数与泛型本篇并不多作阐述，具体可参考官方文档：<br><a href="https://kotlinlang.org/docs/reference/extensions.html" target="_blank" rel="noopener">Kotlin - Extensions</a><br><a href="https://kotlinlang.org/docs/reference/generics.html" target="_blank" rel="noopener">Kotlin - Generics</a></p><p>这个函数很简单，我们首先先看函数标签：<code>public inline fun &lt;T&gt; T.apply(block: T.() -&gt; Unit): T</code>，意思大概就是一个带有型参 T <a href="https://kotlinlang.org/docs/reference/inline-functions.html" target="_blank" rel="noopener">内联函数</a>，并以这个型参作为扩展函数 <code>apply</code> 的目标，并且接受一个 <code>T.() -&gt; Unit</code> 的 Lambda 类型作为参数传入，最终返回型参实际值 T。可以看到其实最核心的部分其实是 <code>T.() -&gt; Unit</code>，也就是接受一个无参数无返回值的 Lambda，其作用就相当于是一个回调函数，而这个 Lambda 也是基于型参 T 扩展出来的函数。因此我们传入回调函数的时候就可以像这么写：<code>example.apply {}</code>，在 <code>{}</code> 之内的内容就是我们回调函数需要执行的代码了。</p><h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">val example = Example()</span><br><span class="line"></span><br><span class="line">example.apply &#123;</span><br><span class="line"></span><br><span class="line">    // 这里的 `this` 实际上指向的是 `example` 这个实例</span><br><span class="line">    this</span><br><span class="line"></span><br><span class="line">    // 调用一条被定义在 `Example` 类下的函数实际上可以从</span><br><span class="line">    this.test()</span><br><span class="line">    // 简化成这样，而类下方的字段则也是相同做法</span><br><span class="line">    test()</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="实际使用"><a href="#实际使用" class="headerlink" title="实际使用"></a>实际使用</h4><p>然后我们使用在之前提到的 JavaFX 例子上：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">fun create() &#123;</span><br><span class="line">    val label = Label(&quot;This is label&quot;).apply &#123;</span><br><span class="line">        style(&quot;-fx-font-weight: bold;&quot;)</span><br><span class="line">        textFill(Color.web(&quot;0069B1&quot;))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    val rectangle = Rectangle(46.0, 18.0).apply &#123;</span><br><span class="line">        arcHeight(10.0)</span><br><span class="line">        arcWidth(10.0)</span><br><span class="line">        fill(Color.web(&quot;#CCEEFF&quot;))</span><br><span class="line">        padding(Insets(2.0, 3.0, 2.0, 3.0))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    val stack = StackPane().apply &#123;</span><br><span class="line">        hgap(10)</span><br><span class="line">        vgap(10)</span><br><span class="line">        children.addAll(rectangle, label)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>感觉不够？我们还可以改成这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">fun create() &#123;</span><br><span class="line">    val label = </span><br><span class="line">    val rectangle = </span><br><span class="line">    val stack = StackPane().apply &#123;</span><br><span class="line">        hgap(10)</span><br><span class="line">        vgap(10)</span><br><span class="line">        children.addAll(</span><br><span class="line">            Label(&quot;This is label&quot;).apply &#123;</span><br><span class="line">            style(&quot;-fx-font-weight: bold;&quot;)</span><br><span class="line">            textFill(Color.web(&quot;0069B1&quot;))</span><br><span class="line">        &#125;,</span><br><span class="line">        Rectangle(46.0, 18.0).apply &#123;</span><br><span class="line">            arcHeight(10.0)</span><br><span class="line">            arcWidth(10.0)</span><br><span class="line">            fill(Color.web(&quot;#CCEEFF&quot;))</span><br><span class="line">            padding(Insets(2.0, 3.0, 2.0, 3.0))</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;相信近年来，也许有这么一批人会认为 Java 语法过于保守及传统，代码写起来就显得有点臃肿了，不直观也不方便，而相对于 Java 而言，Kotlin 虽然与 Java 同属 JVM 平台衍生出来的计算机语言，Kotlin 的语法却比起 Java 来讲有更大的语法自由度（这里
      
    
    </summary>
    
    
      <category term="DSL" scheme="http://blog.e7mc.com/tags/DSL/"/>
    
      <category term="代码设计" scheme="http://blog.e7mc.com/tags/%E4%BB%A3%E7%A0%81%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="Kotlin" scheme="http://blog.e7mc.com/tags/Kotlin/"/>
    
      <category term="Lambda" scheme="http://blog.e7mc.com/tags/Lambda/"/>
    
  </entry>
  
  <entry>
    <title>DSL：解释与设计目的</title>
    <link href="http://blog.e7mc.com/2018/11/21/DSL-explain-and-goals/"/>
    <id>http://blog.e7mc.com/2018/11/21/DSL-explain-and-goals/</id>
    <published>2018-11-21T14:29:41.000Z</published>
    <updated>2019-07-22T09:41:28.162Z</updated>
    
    <content type="html"><![CDATA[<p>一直以来，对于 DSL 这个词大家应该是既熟悉而又陌生，熟悉的是它写起来像啥样，陌生的是他的本质到底是什么，而今天作为第一篇在博客发布的文章就想来探讨一下这个问题。</p><h2 id="DSL-的本质与解释"><a href="#DSL-的本质与解释" class="headerlink" title="DSL 的本质与解释"></a>DSL 的本质与解释</h2><p>首先，我们来看看 Wiki 是怎么解释 DSL 的：</p><blockquote><p>A domain-specific language (DSL) is a computer language specialized to a particular application domain. This is in contrast to a general-purpose language (GPL), which is broadly applicable across domains （原文出处：<a href="https://en.wikipedia.org/wiki/Domain-specific_language" target="_blank" rel="noopener">Wiki: Domain-Specific Language</a>）</p></blockquote><p>而把上面择要翻译过来就是：DSL (领域特定语言) 是专注于某个应用程序领域的计算机语言，而对比起 GPL （通用程序设计语言，例如 Java / C / Python…），DSL 能够在特定的应用领域中具有更大的拓展性及其延伸性。看到这里可能还有部分人不明白这到底是怎么一回事，其实简单来说 DSL 就是为解决特定领域的事情而生的，如果曾经作为 Java 程序员，你可能会经常使用 Maven 跟 Gradle 这两款包管理器去管理你的依赖/库，而透过对比两者语法上更是大相径庭，例如 Maven 采用的是 XML 语法的标记语言，因此我们先来看一下在 Maven 引用依赖部分是怎么写的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;group&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;project&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.0.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>而 Gradle 则是像这样:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    compile group: &quot;group&quot;, name: &quot;project&quot;, version: 1.0.0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上述看到的两种包管理框架语法差别都很大，而 Gradle 对比起 Maven 而言则要更为简洁，而这是为什么呢？最主要的其实就是这两者各自采用了不同种类的语法，Maven 采用的是基于 GPL 的标记语言： <a href="https://en.wikipedia.org/wiki/General-purpose_markup_language" target="_blank" rel="noopener">GPML (General-purpose markup languages)</a>，而 <code>GPML</code> 还包含了 <code>XML</code> <code>YAML</code> <code>GML</code> 等等。除此以外，我们想要在 Maven 里插入有关构建时执行的代码段（或是Task）是非常困难的，其 XML 语法的甚至都大大束缚了代码编写，例如 <code>if</code> <code>switch</code> 这一类流程控制的语法在 XML 上实现就显得非常困难或根本无法实现。由此可见，其实 Maven 虽然用了 XML，但其本身是基于 GPML 的，对于解决特定范畴的问题就显得特别的繁琐了。</p><p>而 Gradle 呢？除了继承自 Groovy 的语法外，其本身还具有一个特性：为解决 Java，Kotlin，Scala 等包问题管理而推出的一种独立框架，也就三基于 DSL 设计思想出来的产物，而相较于 Maven，Gradle 其本身就是为了解决特定领域的问题而生的，其本身语法上导入包更简洁，而且可以比 Maven 更方便解决插入构建期的代码段，解决了 Maven 一直以来难以实现的地方。</p><h2 id="DSL-的设计目标"><a href="#DSL-的设计目标" class="headerlink" title="DSL 的设计目标"></a>DSL 的设计目标</h2><p>DSL 的设计理应十分谨慎，在软件工程上，DSL 总是负责解决领域相关问题及应用于特定领域。一个良好的 DSL 语法设计可以有助于在特定领域更方便地使用，以至于提升开发效率。</p><p>以下给出在 Wiki 给出的三个设计重点的定义，而且均是有别于 GPL 的：</p><blockquote><p>domain-specific languages are less comprehensive.<br>domain-specific languages are much more expressive in their domain.<br>domain-specific languages should exhibit minimal redundancy.</p></blockquote><ul><li>DSL 相较于 GPL 而言范用性要低，因为需要专注于单个特定领域</li><li>DSL 理应在特定领域上比基于 GPL 发挥的作用更大更广</li><li>DSL 应该要尽可能地将（语法设计）冗余部分最小化，更为简单</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总括而言，虽然 GPL 出来的产物可以广泛地应用在不同领域上，例如序列化，上述的 Maven 包管理等，有些时候这类语言在解决某些领域上的特定问题就很困难。而 DSL 则可以解决某些特定领域的问题，而且提出该领域应用更优的解决方案，就如同上述的 Gradle，SQL 等。</p><h2 id="延伸阅读"><a href="#延伸阅读" class="headerlink" title="延伸阅读"></a>延伸阅读</h2><ul><li><a href="https://en.wikipedia.org/wiki/Domain-specific_language" target="_blank" rel="noopener">Domain-specific language - Wikipedia</a></li><li><a href="https://stackoverflow.com/questions/809574/what-is-domain-specific-language-anybody-using-it-and-in-what-way" target="_blank" rel="noopener">What is domain specific language? Anybody using it? And in what way? - StackOverflow</a></li><li><a href="https://www.jetbrains.com/mps/concepts/domain-specific-languages/" target="_blank" rel="noopener">Domain-Specific Languages - Jetbrains</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一直以来，对于 DSL 这个词大家应该是既熟悉而又陌生，熟悉的是它写起来像啥样，陌生的是他的本质到底是什么，而今天作为第一篇在博客发布的文章就想来探讨一下这个问题。&lt;/p&gt;
&lt;h2 id=&quot;DSL-的本质与解释&quot;&gt;&lt;a href=&quot;#DSL-的本质与解释&quot; class=&quot;h
      
    
    </summary>
    
    
      <category term="DSL" scheme="http://blog.e7mc.com/tags/DSL/"/>
    
      <category term="代码设计" scheme="http://blog.e7mc.com/tags/%E4%BB%A3%E7%A0%81%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
</feed>
